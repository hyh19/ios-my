// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Statistics.pb.h"
// @@protoc_insertion_point(imports)

@implementation StatisticsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [StatisticsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Identifier ()
@property (strong) NSString* idfv;
@property (strong) NSString* idfa;
@property (strong) NSString* userId;
@end

@implementation Identifier

- (BOOL) hasIdfv {
  return !!hasIdfv_;
}
- (void) setHasIdfv:(BOOL) _value_ {
  hasIdfv_ = !!_value_;
}
@synthesize idfv;
- (BOOL) hasIdfa {
  return !!hasIdfa_;
}
- (void) setHasIdfa:(BOOL) _value_ {
  hasIdfa_ = !!_value_;
}
@synthesize idfa;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (instancetype) init {
  if ((self = [super init])) {
    self.idfv = @"";
    self.idfa = @"";
    self.userId = @"";
  }
  return self;
}
static Identifier* defaultIdentifierInstance = nil;
+ (void) initialize {
  if (self == [Identifier class]) {
    defaultIdentifierInstance = [[Identifier alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIdentifierInstance;
}
- (instancetype) defaultInstance {
  return defaultIdentifierInstance;
}
- (BOOL) isInitialized {
  if (!self.hasIdfv) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIdfv) {
    [output writeString:1 value:self.idfv];
  }
  if (self.hasIdfa) {
    [output writeString:2 value:self.idfa];
  }
  if (self.hasUserId) {
    [output writeString:3 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIdfv) {
    size_ += computeStringSize(1, self.idfv);
  }
  if (self.hasIdfa) {
    size_ += computeStringSize(2, self.idfa);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(3, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Identifier*) parseFromData:(NSData*) data {
  return (Identifier*)[[[Identifier builder] mergeFromData:data] build];
}
+ (Identifier*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Identifier*)[[[Identifier builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Identifier*) parseFromInputStream:(NSInputStream*) input {
  return (Identifier*)[[[Identifier builder] mergeFromInputStream:input] build];
}
+ (Identifier*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Identifier*)[[[Identifier builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Identifier*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Identifier*)[[[Identifier builder] mergeFromCodedInputStream:input] build];
}
+ (Identifier*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Identifier*)[[[Identifier builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdentifierBuilder*) builder {
  return [[IdentifierBuilder alloc] init];
}
+ (IdentifierBuilder*) builderWithPrototype:(Identifier*) prototype {
  return [[Identifier builder] mergeFrom:prototype];
}
- (IdentifierBuilder*) builder {
  return [Identifier builder];
}
- (IdentifierBuilder*) toBuilder {
  return [Identifier builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIdfv) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idfv", self.idfv];
  }
  if (self.hasIdfa) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idfa", self.idfa];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIdfv) {
    [dictionary setObject: self.idfv forKey: @"idfv"];
  }
  if (self.hasIdfa) {
    [dictionary setObject: self.idfa forKey: @"idfa"];
  }
  if (self.hasUserId) {
    [dictionary setObject: self.userId forKey: @"userId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Identifier class]]) {
    return NO;
  }
  Identifier *otherMessage = other;
  return
      self.hasIdfv == otherMessage.hasIdfv &&
      (!self.hasIdfv || [self.idfv isEqual:otherMessage.idfv]) &&
      self.hasIdfa == otherMessage.hasIdfa &&
      (!self.hasIdfa || [self.idfa isEqual:otherMessage.idfa]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIdfv) {
    hashCode = hashCode * 31 + [self.idfv hash];
  }
  if (self.hasIdfa) {
    hashCode = hashCode * 31 + [self.idfa hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdentifierBuilder()
@property (strong) Identifier* resultIdentifier;
@end

@implementation IdentifierBuilder
@synthesize resultIdentifier;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultIdentifier = [[Identifier alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultIdentifier;
}
- (IdentifierBuilder*) clear {
  self.resultIdentifier = [[Identifier alloc] init];
  return self;
}
- (IdentifierBuilder*) clone {
  return [Identifier builderWithPrototype:resultIdentifier];
}
- (Identifier*) defaultInstance {
  return [Identifier defaultInstance];
}
- (Identifier*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Identifier*) buildPartial {
  Identifier* returnMe = resultIdentifier;
  self.resultIdentifier = nil;
  return returnMe;
}
- (IdentifierBuilder*) mergeFrom:(Identifier*) other {
  if (other == [Identifier defaultInstance]) {
    return self;
  }
  if (other.hasIdfv) {
    [self setIdfv:other.idfv];
  }
  if (other.hasIdfa) {
    [self setIdfa:other.idfa];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdentifierBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdentifierBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIdfv:[input readString]];
        break;
      }
      case 18: {
        [self setIdfa:[input readString]];
        break;
      }
      case 26: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIdfv {
  return resultIdentifier.hasIdfv;
}
- (NSString*) idfv {
  return resultIdentifier.idfv;
}
- (IdentifierBuilder*) setIdfv:(NSString*) value {
  resultIdentifier.hasIdfv = YES;
  resultIdentifier.idfv = value;
  return self;
}
- (IdentifierBuilder*) clearIdfv {
  resultIdentifier.hasIdfv = NO;
  resultIdentifier.idfv = @"";
  return self;
}
- (BOOL) hasIdfa {
  return resultIdentifier.hasIdfa;
}
- (NSString*) idfa {
  return resultIdentifier.idfa;
}
- (IdentifierBuilder*) setIdfa:(NSString*) value {
  resultIdentifier.hasIdfa = YES;
  resultIdentifier.idfa = value;
  return self;
}
- (IdentifierBuilder*) clearIdfa {
  resultIdentifier.hasIdfa = NO;
  resultIdentifier.idfa = @"";
  return self;
}
- (BOOL) hasUserId {
  return resultIdentifier.hasUserId;
}
- (NSString*) userId {
  return resultIdentifier.userId;
}
- (IdentifierBuilder*) setUserId:(NSString*) value {
  resultIdentifier.hasUserId = YES;
  resultIdentifier.userId = value;
  return self;
}
- (IdentifierBuilder*) clearUserId {
  resultIdentifier.hasUserId = NO;
  resultIdentifier.userId = @"";
  return self;
}
@end

@interface Device ()
@property (strong) NSString* name;
@property (strong) NSString* model;
@property (strong) NSString* localizedmodel;
@property SInt32 orientation;
@property BOOL batteryMonitoringEnabled;
@property BOOL orientationNotifications;
@property SInt32 availableBattery;
@property (strong) NSString* batteryState;
@property (strong) NSString* macAddress;
@end

@implementation Device

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasModel {
  return !!hasModel_;
}
- (void) setHasModel:(BOOL) _value_ {
  hasModel_ = !!_value_;
}
@synthesize model;
- (BOOL) hasLocalizedmodel {
  return !!hasLocalizedmodel_;
}
- (void) setHasLocalizedmodel:(BOOL) _value_ {
  hasLocalizedmodel_ = !!_value_;
}
@synthesize localizedmodel;
- (BOOL) hasOrientation {
  return !!hasOrientation_;
}
- (void) setHasOrientation:(BOOL) _value_ {
  hasOrientation_ = !!_value_;
}
@synthesize orientation;
- (BOOL) hasBatteryMonitoringEnabled {
  return !!hasBatteryMonitoringEnabled_;
}
- (void) setHasBatteryMonitoringEnabled:(BOOL) _value_ {
  hasBatteryMonitoringEnabled_ = !!_value_;
}
- (BOOL) batteryMonitoringEnabled {
  return !!batteryMonitoringEnabled_;
}
- (void) setBatteryMonitoringEnabled:(BOOL) _value_ {
  batteryMonitoringEnabled_ = !!_value_;
}
- (BOOL) hasOrientationNotifications {
  return !!hasOrientationNotifications_;
}
- (void) setHasOrientationNotifications:(BOOL) _value_ {
  hasOrientationNotifications_ = !!_value_;
}
- (BOOL) orientationNotifications {
  return !!orientationNotifications_;
}
- (void) setOrientationNotifications:(BOOL) _value_ {
  orientationNotifications_ = !!_value_;
}
- (BOOL) hasAvailableBattery {
  return !!hasAvailableBattery_;
}
- (void) setHasAvailableBattery:(BOOL) _value_ {
  hasAvailableBattery_ = !!_value_;
}
@synthesize availableBattery;
- (BOOL) hasBatteryState {
  return !!hasBatteryState_;
}
- (void) setHasBatteryState:(BOOL) _value_ {
  hasBatteryState_ = !!_value_;
}
@synthesize batteryState;
- (BOOL) hasMacAddress {
  return !!hasMacAddress_;
}
- (void) setHasMacAddress:(BOOL) _value_ {
  hasMacAddress_ = !!_value_;
}
@synthesize macAddress;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.model = @"";
    self.localizedmodel = @"";
    self.orientation = 0;
    self.batteryMonitoringEnabled = NO;
    self.orientationNotifications = NO;
    self.availableBattery = 0;
    self.batteryState = @"";
    self.macAddress = @"";
  }
  return self;
}
static Device* defaultDeviceInstance = nil;
+ (void) initialize {
  if (self == [Device class]) {
    defaultDeviceInstance = [[Device alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDeviceInstance;
}
- (instancetype) defaultInstance {
  return defaultDeviceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasModel) {
    return NO;
  }
  if (!self.hasLocalizedmodel) {
    return NO;
  }
  if (!self.hasOrientation) {
    return NO;
  }
  if (!self.hasBatteryMonitoringEnabled) {
    return NO;
  }
  if (!self.hasOrientationNotifications) {
    return NO;
  }
  if (!self.hasAvailableBattery) {
    return NO;
  }
  if (!self.hasBatteryState) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasModel) {
    [output writeString:2 value:self.model];
  }
  if (self.hasLocalizedmodel) {
    [output writeString:3 value:self.localizedmodel];
  }
  if (self.hasOrientation) {
    [output writeInt32:4 value:self.orientation];
  }
  if (self.hasBatteryMonitoringEnabled) {
    [output writeBool:5 value:self.batteryMonitoringEnabled];
  }
  if (self.hasOrientationNotifications) {
    [output writeBool:6 value:self.orientationNotifications];
  }
  if (self.hasAvailableBattery) {
    [output writeInt32:7 value:self.availableBattery];
  }
  if (self.hasBatteryState) {
    [output writeString:8 value:self.batteryState];
  }
  if (self.hasMacAddress) {
    [output writeString:9 value:self.macAddress];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasModel) {
    size_ += computeStringSize(2, self.model);
  }
  if (self.hasLocalizedmodel) {
    size_ += computeStringSize(3, self.localizedmodel);
  }
  if (self.hasOrientation) {
    size_ += computeInt32Size(4, self.orientation);
  }
  if (self.hasBatteryMonitoringEnabled) {
    size_ += computeBoolSize(5, self.batteryMonitoringEnabled);
  }
  if (self.hasOrientationNotifications) {
    size_ += computeBoolSize(6, self.orientationNotifications);
  }
  if (self.hasAvailableBattery) {
    size_ += computeInt32Size(7, self.availableBattery);
  }
  if (self.hasBatteryState) {
    size_ += computeStringSize(8, self.batteryState);
  }
  if (self.hasMacAddress) {
    size_ += computeStringSize(9, self.macAddress);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Device*) parseFromData:(NSData*) data {
  return (Device*)[[[Device builder] mergeFromData:data] build];
}
+ (Device*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Device*) parseFromInputStream:(NSInputStream*) input {
  return (Device*)[[[Device builder] mergeFromInputStream:input] build];
}
+ (Device*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Device*)[[[Device builder] mergeFromCodedInputStream:input] build];
}
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceBuilder*) builder {
  return [[DeviceBuilder alloc] init];
}
+ (DeviceBuilder*) builderWithPrototype:(Device*) prototype {
  return [[Device builder] mergeFrom:prototype];
}
- (DeviceBuilder*) builder {
  return [Device builder];
}
- (DeviceBuilder*) toBuilder {
  return [Device builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"model", self.model];
  }
  if (self.hasLocalizedmodel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localizedmodel", self.localizedmodel];
  }
  if (self.hasOrientation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orientation", [NSNumber numberWithInteger:self.orientation]];
  }
  if (self.hasBatteryMonitoringEnabled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"batteryMonitoringEnabled", [NSNumber numberWithBool:self.batteryMonitoringEnabled]];
  }
  if (self.hasOrientationNotifications) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orientationNotifications", [NSNumber numberWithBool:self.orientationNotifications]];
  }
  if (self.hasAvailableBattery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"availableBattery", [NSNumber numberWithInteger:self.availableBattery]];
  }
  if (self.hasBatteryState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"batteryState", self.batteryState];
  }
  if (self.hasMacAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"macAddress", self.macAddress];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasModel) {
    [dictionary setObject: self.model forKey: @"model"];
  }
  if (self.hasLocalizedmodel) {
    [dictionary setObject: self.localizedmodel forKey: @"localizedmodel"];
  }
  if (self.hasOrientation) {
    [dictionary setObject: [NSNumber numberWithInteger:self.orientation] forKey: @"orientation"];
  }
  if (self.hasBatteryMonitoringEnabled) {
    [dictionary setObject: [NSNumber numberWithBool:self.batteryMonitoringEnabled] forKey: @"batteryMonitoringEnabled"];
  }
  if (self.hasOrientationNotifications) {
    [dictionary setObject: [NSNumber numberWithBool:self.orientationNotifications] forKey: @"orientationNotifications"];
  }
  if (self.hasAvailableBattery) {
    [dictionary setObject: [NSNumber numberWithInteger:self.availableBattery] forKey: @"availableBattery"];
  }
  if (self.hasBatteryState) {
    [dictionary setObject: self.batteryState forKey: @"batteryState"];
  }
  if (self.hasMacAddress) {
    [dictionary setObject: self.macAddress forKey: @"macAddress"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Device class]]) {
    return NO;
  }
  Device *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasModel == otherMessage.hasModel &&
      (!self.hasModel || [self.model isEqual:otherMessage.model]) &&
      self.hasLocalizedmodel == otherMessage.hasLocalizedmodel &&
      (!self.hasLocalizedmodel || [self.localizedmodel isEqual:otherMessage.localizedmodel]) &&
      self.hasOrientation == otherMessage.hasOrientation &&
      (!self.hasOrientation || self.orientation == otherMessage.orientation) &&
      self.hasBatteryMonitoringEnabled == otherMessage.hasBatteryMonitoringEnabled &&
      (!self.hasBatteryMonitoringEnabled || self.batteryMonitoringEnabled == otherMessage.batteryMonitoringEnabled) &&
      self.hasOrientationNotifications == otherMessage.hasOrientationNotifications &&
      (!self.hasOrientationNotifications || self.orientationNotifications == otherMessage.orientationNotifications) &&
      self.hasAvailableBattery == otherMessage.hasAvailableBattery &&
      (!self.hasAvailableBattery || self.availableBattery == otherMessage.availableBattery) &&
      self.hasBatteryState == otherMessage.hasBatteryState &&
      (!self.hasBatteryState || [self.batteryState isEqual:otherMessage.batteryState]) &&
      self.hasMacAddress == otherMessage.hasMacAddress &&
      (!self.hasMacAddress || [self.macAddress isEqual:otherMessage.macAddress]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasModel) {
    hashCode = hashCode * 31 + [self.model hash];
  }
  if (self.hasLocalizedmodel) {
    hashCode = hashCode * 31 + [self.localizedmodel hash];
  }
  if (self.hasOrientation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.orientation] hash];
  }
  if (self.hasBatteryMonitoringEnabled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.batteryMonitoringEnabled] hash];
  }
  if (self.hasOrientationNotifications) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.orientationNotifications] hash];
  }
  if (self.hasAvailableBattery) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.availableBattery] hash];
  }
  if (self.hasBatteryState) {
    hashCode = hashCode * 31 + [self.batteryState hash];
  }
  if (self.hasMacAddress) {
    hashCode = hashCode * 31 + [self.macAddress hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DeviceBuilder()
@property (strong) Device* resultDevice;
@end

@implementation DeviceBuilder
@synthesize resultDevice;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDevice = [[Device alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDevice;
}
- (DeviceBuilder*) clear {
  self.resultDevice = [[Device alloc] init];
  return self;
}
- (DeviceBuilder*) clone {
  return [Device builderWithPrototype:resultDevice];
}
- (Device*) defaultInstance {
  return [Device defaultInstance];
}
- (Device*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Device*) buildPartial {
  Device* returnMe = resultDevice;
  self.resultDevice = nil;
  return returnMe;
}
- (DeviceBuilder*) mergeFrom:(Device*) other {
  if (other == [Device defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasModel) {
    [self setModel:other.model];
  }
  if (other.hasLocalizedmodel) {
    [self setLocalizedmodel:other.localizedmodel];
  }
  if (other.hasOrientation) {
    [self setOrientation:other.orientation];
  }
  if (other.hasBatteryMonitoringEnabled) {
    [self setBatteryMonitoringEnabled:other.batteryMonitoringEnabled];
  }
  if (other.hasOrientationNotifications) {
    [self setOrientationNotifications:other.orientationNotifications];
  }
  if (other.hasAvailableBattery) {
    [self setAvailableBattery:other.availableBattery];
  }
  if (other.hasBatteryState) {
    [self setBatteryState:other.batteryState];
  }
  if (other.hasMacAddress) {
    [self setMacAddress:other.macAddress];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DeviceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DeviceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setModel:[input readString]];
        break;
      }
      case 26: {
        [self setLocalizedmodel:[input readString]];
        break;
      }
      case 32: {
        [self setOrientation:[input readInt32]];
        break;
      }
      case 40: {
        [self setBatteryMonitoringEnabled:[input readBool]];
        break;
      }
      case 48: {
        [self setOrientationNotifications:[input readBool]];
        break;
      }
      case 56: {
        [self setAvailableBattery:[input readInt32]];
        break;
      }
      case 66: {
        [self setBatteryState:[input readString]];
        break;
      }
      case 74: {
        [self setMacAddress:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultDevice.hasName;
}
- (NSString*) name {
  return resultDevice.name;
}
- (DeviceBuilder*) setName:(NSString*) value {
  resultDevice.hasName = YES;
  resultDevice.name = value;
  return self;
}
- (DeviceBuilder*) clearName {
  resultDevice.hasName = NO;
  resultDevice.name = @"";
  return self;
}
- (BOOL) hasModel {
  return resultDevice.hasModel;
}
- (NSString*) model {
  return resultDevice.model;
}
- (DeviceBuilder*) setModel:(NSString*) value {
  resultDevice.hasModel = YES;
  resultDevice.model = value;
  return self;
}
- (DeviceBuilder*) clearModel {
  resultDevice.hasModel = NO;
  resultDevice.model = @"";
  return self;
}
- (BOOL) hasLocalizedmodel {
  return resultDevice.hasLocalizedmodel;
}
- (NSString*) localizedmodel {
  return resultDevice.localizedmodel;
}
- (DeviceBuilder*) setLocalizedmodel:(NSString*) value {
  resultDevice.hasLocalizedmodel = YES;
  resultDevice.localizedmodel = value;
  return self;
}
- (DeviceBuilder*) clearLocalizedmodel {
  resultDevice.hasLocalizedmodel = NO;
  resultDevice.localizedmodel = @"";
  return self;
}
- (BOOL) hasOrientation {
  return resultDevice.hasOrientation;
}
- (SInt32) orientation {
  return resultDevice.orientation;
}
- (DeviceBuilder*) setOrientation:(SInt32) value {
  resultDevice.hasOrientation = YES;
  resultDevice.orientation = value;
  return self;
}
- (DeviceBuilder*) clearOrientation {
  resultDevice.hasOrientation = NO;
  resultDevice.orientation = 0;
  return self;
}
- (BOOL) hasBatteryMonitoringEnabled {
  return resultDevice.hasBatteryMonitoringEnabled;
}
- (BOOL) batteryMonitoringEnabled {
  return resultDevice.batteryMonitoringEnabled;
}
- (DeviceBuilder*) setBatteryMonitoringEnabled:(BOOL) value {
  resultDevice.hasBatteryMonitoringEnabled = YES;
  resultDevice.batteryMonitoringEnabled = value;
  return self;
}
- (DeviceBuilder*) clearBatteryMonitoringEnabled {
  resultDevice.hasBatteryMonitoringEnabled = NO;
  resultDevice.batteryMonitoringEnabled = NO;
  return self;
}
- (BOOL) hasOrientationNotifications {
  return resultDevice.hasOrientationNotifications;
}
- (BOOL) orientationNotifications {
  return resultDevice.orientationNotifications;
}
- (DeviceBuilder*) setOrientationNotifications:(BOOL) value {
  resultDevice.hasOrientationNotifications = YES;
  resultDevice.orientationNotifications = value;
  return self;
}
- (DeviceBuilder*) clearOrientationNotifications {
  resultDevice.hasOrientationNotifications = NO;
  resultDevice.orientationNotifications = NO;
  return self;
}
- (BOOL) hasAvailableBattery {
  return resultDevice.hasAvailableBattery;
}
- (SInt32) availableBattery {
  return resultDevice.availableBattery;
}
- (DeviceBuilder*) setAvailableBattery:(SInt32) value {
  resultDevice.hasAvailableBattery = YES;
  resultDevice.availableBattery = value;
  return self;
}
- (DeviceBuilder*) clearAvailableBattery {
  resultDevice.hasAvailableBattery = NO;
  resultDevice.availableBattery = 0;
  return self;
}
- (BOOL) hasBatteryState {
  return resultDevice.hasBatteryState;
}
- (NSString*) batteryState {
  return resultDevice.batteryState;
}
- (DeviceBuilder*) setBatteryState:(NSString*) value {
  resultDevice.hasBatteryState = YES;
  resultDevice.batteryState = value;
  return self;
}
- (DeviceBuilder*) clearBatteryState {
  resultDevice.hasBatteryState = NO;
  resultDevice.batteryState = @"";
  return self;
}
- (BOOL) hasMacAddress {
  return resultDevice.hasMacAddress;
}
- (NSString*) macAddress {
  return resultDevice.macAddress;
}
- (DeviceBuilder*) setMacAddress:(NSString*) value {
  resultDevice.hasMacAddress = YES;
  resultDevice.macAddress = value;
  return self;
}
- (DeviceBuilder*) clearMacAddress {
  resultDevice.hasMacAddress = NO;
  resultDevice.macAddress = @"";
  return self;
}
@end

@interface System ()
@property (strong) NSString* systemName;
@property (strong) NSString* systemVersion;
@property (strong) NSString* countryCode;
@property SInt32 networkType;
@property (strong) NSString* networkInformation;
@end

@implementation System

- (BOOL) hasSystemName {
  return !!hasSystemName_;
}
- (void) setHasSystemName:(BOOL) _value_ {
  hasSystemName_ = !!_value_;
}
@synthesize systemName;
- (BOOL) hasSystemVersion {
  return !!hasSystemVersion_;
}
- (void) setHasSystemVersion:(BOOL) _value_ {
  hasSystemVersion_ = !!_value_;
}
@synthesize systemVersion;
- (BOOL) hasCountryCode {
  return !!hasCountryCode_;
}
- (void) setHasCountryCode:(BOOL) _value_ {
  hasCountryCode_ = !!_value_;
}
@synthesize countryCode;
- (BOOL) hasNetworkType {
  return !!hasNetworkType_;
}
- (void) setHasNetworkType:(BOOL) _value_ {
  hasNetworkType_ = !!_value_;
}
@synthesize networkType;
- (BOOL) hasNetworkInformation {
  return !!hasNetworkInformation_;
}
- (void) setHasNetworkInformation:(BOOL) _value_ {
  hasNetworkInformation_ = !!_value_;
}
@synthesize networkInformation;
- (instancetype) init {
  if ((self = [super init])) {
    self.systemName = @"";
    self.systemVersion = @"";
    self.countryCode = @"";
    self.networkType = 0;
    self.networkInformation = @"";
  }
  return self;
}
static System* defaultSystemInstance = nil;
+ (void) initialize {
  if (self == [System class]) {
    defaultSystemInstance = [[System alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSystemInstance;
}
- (instancetype) defaultInstance {
  return defaultSystemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSystemName) {
    return NO;
  }
  if (!self.hasSystemVersion) {
    return NO;
  }
  if (!self.hasCountryCode) {
    return NO;
  }
  if (!self.hasNetworkType) {
    return NO;
  }
  if (!self.hasNetworkInformation) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSystemName) {
    [output writeString:1 value:self.systemName];
  }
  if (self.hasSystemVersion) {
    [output writeString:2 value:self.systemVersion];
  }
  if (self.hasCountryCode) {
    [output writeString:3 value:self.countryCode];
  }
  if (self.hasNetworkType) {
    [output writeInt32:4 value:self.networkType];
  }
  if (self.hasNetworkInformation) {
    [output writeString:5 value:self.networkInformation];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSystemName) {
    size_ += computeStringSize(1, self.systemName);
  }
  if (self.hasSystemVersion) {
    size_ += computeStringSize(2, self.systemVersion);
  }
  if (self.hasCountryCode) {
    size_ += computeStringSize(3, self.countryCode);
  }
  if (self.hasNetworkType) {
    size_ += computeInt32Size(4, self.networkType);
  }
  if (self.hasNetworkInformation) {
    size_ += computeStringSize(5, self.networkInformation);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (System*) parseFromData:(NSData*) data {
  return (System*)[[[System builder] mergeFromData:data] build];
}
+ (System*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (System*)[[[System builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (System*) parseFromInputStream:(NSInputStream*) input {
  return (System*)[[[System builder] mergeFromInputStream:input] build];
}
+ (System*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (System*)[[[System builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (System*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (System*)[[[System builder] mergeFromCodedInputStream:input] build];
}
+ (System*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (System*)[[[System builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SystemBuilder*) builder {
  return [[SystemBuilder alloc] init];
}
+ (SystemBuilder*) builderWithPrototype:(System*) prototype {
  return [[System builder] mergeFrom:prototype];
}
- (SystemBuilder*) builder {
  return [System builder];
}
- (SystemBuilder*) toBuilder {
  return [System builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSystemName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"systemName", self.systemName];
  }
  if (self.hasSystemVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"systemVersion", self.systemVersion];
  }
  if (self.hasCountryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"countryCode", self.countryCode];
  }
  if (self.hasNetworkType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"networkType", [NSNumber numberWithInteger:self.networkType]];
  }
  if (self.hasNetworkInformation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"networkInformation", self.networkInformation];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSystemName) {
    [dictionary setObject: self.systemName forKey: @"systemName"];
  }
  if (self.hasSystemVersion) {
    [dictionary setObject: self.systemVersion forKey: @"systemVersion"];
  }
  if (self.hasCountryCode) {
    [dictionary setObject: self.countryCode forKey: @"countryCode"];
  }
  if (self.hasNetworkType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.networkType] forKey: @"networkType"];
  }
  if (self.hasNetworkInformation) {
    [dictionary setObject: self.networkInformation forKey: @"networkInformation"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[System class]]) {
    return NO;
  }
  System *otherMessage = other;
  return
      self.hasSystemName == otherMessage.hasSystemName &&
      (!self.hasSystemName || [self.systemName isEqual:otherMessage.systemName]) &&
      self.hasSystemVersion == otherMessage.hasSystemVersion &&
      (!self.hasSystemVersion || [self.systemVersion isEqual:otherMessage.systemVersion]) &&
      self.hasCountryCode == otherMessage.hasCountryCode &&
      (!self.hasCountryCode || [self.countryCode isEqual:otherMessage.countryCode]) &&
      self.hasNetworkType == otherMessage.hasNetworkType &&
      (!self.hasNetworkType || self.networkType == otherMessage.networkType) &&
      self.hasNetworkInformation == otherMessage.hasNetworkInformation &&
      (!self.hasNetworkInformation || [self.networkInformation isEqual:otherMessage.networkInformation]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSystemName) {
    hashCode = hashCode * 31 + [self.systemName hash];
  }
  if (self.hasSystemVersion) {
    hashCode = hashCode * 31 + [self.systemVersion hash];
  }
  if (self.hasCountryCode) {
    hashCode = hashCode * 31 + [self.countryCode hash];
  }
  if (self.hasNetworkType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.networkType] hash];
  }
  if (self.hasNetworkInformation) {
    hashCode = hashCode * 31 + [self.networkInformation hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SystemBuilder()
@property (strong) System* resultSystem;
@end

@implementation SystemBuilder
@synthesize resultSystem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSystem = [[System alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSystem;
}
- (SystemBuilder*) clear {
  self.resultSystem = [[System alloc] init];
  return self;
}
- (SystemBuilder*) clone {
  return [System builderWithPrototype:resultSystem];
}
- (System*) defaultInstance {
  return [System defaultInstance];
}
- (System*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (System*) buildPartial {
  System* returnMe = resultSystem;
  self.resultSystem = nil;
  return returnMe;
}
- (SystemBuilder*) mergeFrom:(System*) other {
  if (other == [System defaultInstance]) {
    return self;
  }
  if (other.hasSystemName) {
    [self setSystemName:other.systemName];
  }
  if (other.hasSystemVersion) {
    [self setSystemVersion:other.systemVersion];
  }
  if (other.hasCountryCode) {
    [self setCountryCode:other.countryCode];
  }
  if (other.hasNetworkType) {
    [self setNetworkType:other.networkType];
  }
  if (other.hasNetworkInformation) {
    [self setNetworkInformation:other.networkInformation];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SystemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SystemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSystemName:[input readString]];
        break;
      }
      case 18: {
        [self setSystemVersion:[input readString]];
        break;
      }
      case 26: {
        [self setCountryCode:[input readString]];
        break;
      }
      case 32: {
        [self setNetworkType:[input readInt32]];
        break;
      }
      case 42: {
        [self setNetworkInformation:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSystemName {
  return resultSystem.hasSystemName;
}
- (NSString*) systemName {
  return resultSystem.systemName;
}
- (SystemBuilder*) setSystemName:(NSString*) value {
  resultSystem.hasSystemName = YES;
  resultSystem.systemName = value;
  return self;
}
- (SystemBuilder*) clearSystemName {
  resultSystem.hasSystemName = NO;
  resultSystem.systemName = @"";
  return self;
}
- (BOOL) hasSystemVersion {
  return resultSystem.hasSystemVersion;
}
- (NSString*) systemVersion {
  return resultSystem.systemVersion;
}
- (SystemBuilder*) setSystemVersion:(NSString*) value {
  resultSystem.hasSystemVersion = YES;
  resultSystem.systemVersion = value;
  return self;
}
- (SystemBuilder*) clearSystemVersion {
  resultSystem.hasSystemVersion = NO;
  resultSystem.systemVersion = @"";
  return self;
}
- (BOOL) hasCountryCode {
  return resultSystem.hasCountryCode;
}
- (NSString*) countryCode {
  return resultSystem.countryCode;
}
- (SystemBuilder*) setCountryCode:(NSString*) value {
  resultSystem.hasCountryCode = YES;
  resultSystem.countryCode = value;
  return self;
}
- (SystemBuilder*) clearCountryCode {
  resultSystem.hasCountryCode = NO;
  resultSystem.countryCode = @"";
  return self;
}
- (BOOL) hasNetworkType {
  return resultSystem.hasNetworkType;
}
- (SInt32) networkType {
  return resultSystem.networkType;
}
- (SystemBuilder*) setNetworkType:(SInt32) value {
  resultSystem.hasNetworkType = YES;
  resultSystem.networkType = value;
  return self;
}
- (SystemBuilder*) clearNetworkType {
  resultSystem.hasNetworkType = NO;
  resultSystem.networkType = 0;
  return self;
}
- (BOOL) hasNetworkInformation {
  return resultSystem.hasNetworkInformation;
}
- (NSString*) networkInformation {
  return resultSystem.networkInformation;
}
- (SystemBuilder*) setNetworkInformation:(NSString*) value {
  resultSystem.hasNetworkInformation = YES;
  resultSystem.networkInformation = value;
  return self;
}
- (SystemBuilder*) clearNetworkInformation {
  resultSystem.hasNetworkInformation = NO;
  resultSystem.networkInformation = @"";
  return self;
}
@end

@interface Product ()
@property (strong) NSString* packgeName;
@property SInt32 appVersionCode;
@property SInt64 installTime;
@property SInt64 updateTime;
@end

@implementation Product

- (BOOL) hasPackgeName {
  return !!hasPackgeName_;
}
- (void) setHasPackgeName:(BOOL) _value_ {
  hasPackgeName_ = !!_value_;
}
@synthesize packgeName;
- (BOOL) hasAppVersionCode {
  return !!hasAppVersionCode_;
}
- (void) setHasAppVersionCode:(BOOL) _value_ {
  hasAppVersionCode_ = !!_value_;
}
@synthesize appVersionCode;
- (BOOL) hasInstallTime {
  return !!hasInstallTime_;
}
- (void) setHasInstallTime:(BOOL) _value_ {
  hasInstallTime_ = !!_value_;
}
@synthesize installTime;
- (BOOL) hasUpdateTime {
  return !!hasUpdateTime_;
}
- (void) setHasUpdateTime:(BOOL) _value_ {
  hasUpdateTime_ = !!_value_;
}
@synthesize updateTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.packgeName = @"";
    self.appVersionCode = 0;
    self.installTime = 0L;
    self.updateTime = 0L;
  }
  return self;
}
static Product* defaultProductInstance = nil;
+ (void) initialize {
  if (self == [Product class]) {
    defaultProductInstance = [[Product alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProductInstance;
}
- (instancetype) defaultInstance {
  return defaultProductInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPackgeName) {
    return NO;
  }
  if (!self.hasAppVersionCode) {
    return NO;
  }
  if (!self.hasInstallTime) {
    return NO;
  }
  if (!self.hasUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPackgeName) {
    [output writeString:1 value:self.packgeName];
  }
  if (self.hasAppVersionCode) {
    [output writeInt32:2 value:self.appVersionCode];
  }
  if (self.hasInstallTime) {
    [output writeInt64:3 value:self.installTime];
  }
  if (self.hasUpdateTime) {
    [output writeInt64:4 value:self.updateTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPackgeName) {
    size_ += computeStringSize(1, self.packgeName);
  }
  if (self.hasAppVersionCode) {
    size_ += computeInt32Size(2, self.appVersionCode);
  }
  if (self.hasInstallTime) {
    size_ += computeInt64Size(3, self.installTime);
  }
  if (self.hasUpdateTime) {
    size_ += computeInt64Size(4, self.updateTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Product*) parseFromData:(NSData*) data {
  return (Product*)[[[Product builder] mergeFromData:data] build];
}
+ (Product*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Product*)[[[Product builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Product*) parseFromInputStream:(NSInputStream*) input {
  return (Product*)[[[Product builder] mergeFromInputStream:input] build];
}
+ (Product*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Product*)[[[Product builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Product*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Product*)[[[Product builder] mergeFromCodedInputStream:input] build];
}
+ (Product*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Product*)[[[Product builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProductBuilder*) builder {
  return [[ProductBuilder alloc] init];
}
+ (ProductBuilder*) builderWithPrototype:(Product*) prototype {
  return [[Product builder] mergeFrom:prototype];
}
- (ProductBuilder*) builder {
  return [Product builder];
}
- (ProductBuilder*) toBuilder {
  return [Product builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPackgeName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packgeName", self.packgeName];
  }
  if (self.hasAppVersionCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersionCode", [NSNumber numberWithInteger:self.appVersionCode]];
  }
  if (self.hasInstallTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"installTime", [NSNumber numberWithLongLong:self.installTime]];
  }
  if (self.hasUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updateTime", [NSNumber numberWithLongLong:self.updateTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPackgeName) {
    [dictionary setObject: self.packgeName forKey: @"packgeName"];
  }
  if (self.hasAppVersionCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.appVersionCode] forKey: @"appVersionCode"];
  }
  if (self.hasInstallTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.installTime] forKey: @"installTime"];
  }
  if (self.hasUpdateTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.updateTime] forKey: @"updateTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Product class]]) {
    return NO;
  }
  Product *otherMessage = other;
  return
      self.hasPackgeName == otherMessage.hasPackgeName &&
      (!self.hasPackgeName || [self.packgeName isEqual:otherMessage.packgeName]) &&
      self.hasAppVersionCode == otherMessage.hasAppVersionCode &&
      (!self.hasAppVersionCode || self.appVersionCode == otherMessage.appVersionCode) &&
      self.hasInstallTime == otherMessage.hasInstallTime &&
      (!self.hasInstallTime || self.installTime == otherMessage.installTime) &&
      self.hasUpdateTime == otherMessage.hasUpdateTime &&
      (!self.hasUpdateTime || self.updateTime == otherMessage.updateTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPackgeName) {
    hashCode = hashCode * 31 + [self.packgeName hash];
  }
  if (self.hasAppVersionCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.appVersionCode] hash];
  }
  if (self.hasInstallTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.installTime] hash];
  }
  if (self.hasUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.updateTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProductBuilder()
@property (strong) Product* resultProduct;
@end

@implementation ProductBuilder
@synthesize resultProduct;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProduct = [[Product alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProduct;
}
- (ProductBuilder*) clear {
  self.resultProduct = [[Product alloc] init];
  return self;
}
- (ProductBuilder*) clone {
  return [Product builderWithPrototype:resultProduct];
}
- (Product*) defaultInstance {
  return [Product defaultInstance];
}
- (Product*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Product*) buildPartial {
  Product* returnMe = resultProduct;
  self.resultProduct = nil;
  return returnMe;
}
- (ProductBuilder*) mergeFrom:(Product*) other {
  if (other == [Product defaultInstance]) {
    return self;
  }
  if (other.hasPackgeName) {
    [self setPackgeName:other.packgeName];
  }
  if (other.hasAppVersionCode) {
    [self setAppVersionCode:other.appVersionCode];
  }
  if (other.hasInstallTime) {
    [self setInstallTime:other.installTime];
  }
  if (other.hasUpdateTime) {
    [self setUpdateTime:other.updateTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProductBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProductBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPackgeName:[input readString]];
        break;
      }
      case 16: {
        [self setAppVersionCode:[input readInt32]];
        break;
      }
      case 24: {
        [self setInstallTime:[input readInt64]];
        break;
      }
      case 32: {
        [self setUpdateTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasPackgeName {
  return resultProduct.hasPackgeName;
}
- (NSString*) packgeName {
  return resultProduct.packgeName;
}
- (ProductBuilder*) setPackgeName:(NSString*) value {
  resultProduct.hasPackgeName = YES;
  resultProduct.packgeName = value;
  return self;
}
- (ProductBuilder*) clearPackgeName {
  resultProduct.hasPackgeName = NO;
  resultProduct.packgeName = @"";
  return self;
}
- (BOOL) hasAppVersionCode {
  return resultProduct.hasAppVersionCode;
}
- (SInt32) appVersionCode {
  return resultProduct.appVersionCode;
}
- (ProductBuilder*) setAppVersionCode:(SInt32) value {
  resultProduct.hasAppVersionCode = YES;
  resultProduct.appVersionCode = value;
  return self;
}
- (ProductBuilder*) clearAppVersionCode {
  resultProduct.hasAppVersionCode = NO;
  resultProduct.appVersionCode = 0;
  return self;
}
- (BOOL) hasInstallTime {
  return resultProduct.hasInstallTime;
}
- (SInt64) installTime {
  return resultProduct.installTime;
}
- (ProductBuilder*) setInstallTime:(SInt64) value {
  resultProduct.hasInstallTime = YES;
  resultProduct.installTime = value;
  return self;
}
- (ProductBuilder*) clearInstallTime {
  resultProduct.hasInstallTime = NO;
  resultProduct.installTime = 0L;
  return self;
}
- (BOOL) hasUpdateTime {
  return resultProduct.hasUpdateTime;
}
- (SInt64) updateTime {
  return resultProduct.updateTime;
}
- (ProductBuilder*) setUpdateTime:(SInt64) value {
  resultProduct.hasUpdateTime = YES;
  resultProduct.updateTime = value;
  return self;
}
- (ProductBuilder*) clearUpdateTime {
  resultProduct.hasUpdateTime = NO;
  resultProduct.updateTime = 0L;
  return self;
}
@end

@interface EventParameter ()
@property (strong) NSString* key;
@property (strong) NSString* value;
@end

@implementation EventParameter

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = @"";
  }
  return self;
}
static EventParameter* defaultEventParameterInstance = nil;
+ (void) initialize {
  if (self == [EventParameter class]) {
    defaultEventParameterInstance = [[EventParameter alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultEventParameterInstance;
}
- (instancetype) defaultInstance {
  return defaultEventParameterInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (EventParameter*) parseFromData:(NSData*) data {
  return (EventParameter*)[[[EventParameter builder] mergeFromData:data] build];
}
+ (EventParameter*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EventParameter*)[[[EventParameter builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (EventParameter*) parseFromInputStream:(NSInputStream*) input {
  return (EventParameter*)[[[EventParameter builder] mergeFromInputStream:input] build];
}
+ (EventParameter*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EventParameter*)[[[EventParameter builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EventParameter*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (EventParameter*)[[[EventParameter builder] mergeFromCodedInputStream:input] build];
}
+ (EventParameter*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EventParameter*)[[[EventParameter builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EventParameterBuilder*) builder {
  return [[EventParameterBuilder alloc] init];
}
+ (EventParameterBuilder*) builderWithPrototype:(EventParameter*) prototype {
  return [[EventParameter builder] mergeFrom:prototype];
}
- (EventParameterBuilder*) builder {
  return [EventParameter builder];
}
- (EventParameterBuilder*) toBuilder {
  return [EventParameter builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[EventParameter class]]) {
    return NO;
  }
  EventParameter *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface EventParameterBuilder()
@property (strong) EventParameter* resultEventParameter;
@end

@implementation EventParameterBuilder
@synthesize resultEventParameter;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEventParameter = [[EventParameter alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEventParameter;
}
- (EventParameterBuilder*) clear {
  self.resultEventParameter = [[EventParameter alloc] init];
  return self;
}
- (EventParameterBuilder*) clone {
  return [EventParameter builderWithPrototype:resultEventParameter];
}
- (EventParameter*) defaultInstance {
  return [EventParameter defaultInstance];
}
- (EventParameter*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (EventParameter*) buildPartial {
  EventParameter* returnMe = resultEventParameter;
  self.resultEventParameter = nil;
  return returnMe;
}
- (EventParameterBuilder*) mergeFrom:(EventParameter*) other {
  if (other == [EventParameter defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EventParameterBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EventParameterBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultEventParameter.hasKey;
}
- (NSString*) key {
  return resultEventParameter.key;
}
- (EventParameterBuilder*) setKey:(NSString*) value {
  resultEventParameter.hasKey = YES;
  resultEventParameter.key = value;
  return self;
}
- (EventParameterBuilder*) clearKey {
  resultEventParameter.hasKey = NO;
  resultEventParameter.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultEventParameter.hasValue;
}
- (NSString*) value {
  return resultEventParameter.value;
}
- (EventParameterBuilder*) setValue:(NSString*) value {
  resultEventParameter.hasValue = YES;
  resultEventParameter.value = value;
  return self;
}
- (EventParameterBuilder*) clearValue {
  resultEventParameter.hasValue = NO;
  resultEventParameter.value = @"";
  return self;
}
@end

@interface Event ()
@property SInt64 sessionId;
@property (strong) NSString* id;
@property SInt64 time;
@property (strong) NSMutableArray * eventParametersArray;
@end

@implementation Event

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
@synthesize eventParametersArray;
@dynamic eventParameters;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionId = 0L;
    self.id = @"";
    self.time = 0L;
  }
  return self;
}
static Event* defaultEventInstance = nil;
+ (void) initialize {
  if (self == [Event class]) {
    defaultEventInstance = [[Event alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultEventInstance;
}
- (instancetype) defaultInstance {
  return defaultEventInstance;
}
- (NSArray *)eventParameters {
  return eventParametersArray;
}
- (EventParameter*)eventParametersAtIndex:(NSUInteger)index {
  return [eventParametersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeInt64:1 value:self.sessionId];
  }
  if (self.hasId) {
    [output writeString:2 value:self.id];
  }
  if (self.hasTime) {
    [output writeInt64:3 value:self.time];
  }
  [self.eventParametersArray enumerateObjectsUsingBlock:^(EventParameter *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionId) {
    size_ += computeInt64Size(1, self.sessionId);
  }
  if (self.hasId) {
    size_ += computeStringSize(2, self.id);
  }
  if (self.hasTime) {
    size_ += computeInt64Size(3, self.time);
  }
  [self.eventParametersArray enumerateObjectsUsingBlock:^(EventParameter *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Event*) parseFromData:(NSData*) data {
  return (Event*)[[[Event builder] mergeFromData:data] build];
}
+ (Event*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Event*) parseFromInputStream:(NSInputStream*) input {
  return (Event*)[[[Event builder] mergeFromInputStream:input] build];
}
+ (Event*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Event*)[[[Event builder] mergeFromCodedInputStream:input] build];
}
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EventBuilder*) builder {
  return [[EventBuilder alloc] init];
}
+ (EventBuilder*) builderWithPrototype:(Event*) prototype {
  return [[Event builder] mergeFrom:prototype];
}
- (EventBuilder*) builder {
  return [Event builder];
}
- (EventBuilder*) toBuilder {
  return [Event builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithLongLong:self.time]];
  }
  [self.eventParametersArray enumerateObjectsUsingBlock:^(EventParameter *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"eventParameters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.time] forKey: @"time"];
  }
  for (EventParameter* element in self.eventParametersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"eventParameters"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Event class]]) {
    return NO;
  }
  Event *otherMessage = other;
  return
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      [self.eventParametersArray isEqualToArray:otherMessage.eventParametersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.time] hash];
  }
  [self.eventParametersArray enumerateObjectsUsingBlock:^(EventParameter *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface EventBuilder()
@property (strong) Event* resultEvent;
@end

@implementation EventBuilder
@synthesize resultEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEvent = [[Event alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEvent;
}
- (EventBuilder*) clear {
  self.resultEvent = [[Event alloc] init];
  return self;
}
- (EventBuilder*) clone {
  return [Event builderWithPrototype:resultEvent];
}
- (Event*) defaultInstance {
  return [Event defaultInstance];
}
- (Event*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Event*) buildPartial {
  Event* returnMe = resultEvent;
  self.resultEvent = nil;
  return returnMe;
}
- (EventBuilder*) mergeFrom:(Event*) other {
  if (other == [Event defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.eventParametersArray.count > 0) {
    if (resultEvent.eventParametersArray == nil) {
      resultEvent.eventParametersArray = [[NSMutableArray alloc] initWithArray:other.eventParametersArray];
    } else {
      [resultEvent.eventParametersArray addObjectsFromArray:other.eventParametersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 18: {
        [self setId:[input readString]];
        break;
      }
      case 24: {
        [self setTime:[input readInt64]];
        break;
      }
      case 34: {
        EventParameterBuilder* subBuilder = [EventParameter builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEventParameters:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return resultEvent.hasSessionId;
}
- (SInt64) sessionId {
  return resultEvent.sessionId;
}
- (EventBuilder*) setSessionId:(SInt64) value {
  resultEvent.hasSessionId = YES;
  resultEvent.sessionId = value;
  return self;
}
- (EventBuilder*) clearSessionId {
  resultEvent.hasSessionId = NO;
  resultEvent.sessionId = 0L;
  return self;
}
- (BOOL) hasId {
  return resultEvent.hasId;
}
- (NSString*) id {
  return resultEvent.id;
}
- (EventBuilder*) setId:(NSString*) value {
  resultEvent.hasId = YES;
  resultEvent.id = value;
  return self;
}
- (EventBuilder*) clearId {
  resultEvent.hasId = NO;
  resultEvent.id = @"";
  return self;
}
- (BOOL) hasTime {
  return resultEvent.hasTime;
}
- (SInt64) time {
  return resultEvent.time;
}
- (EventBuilder*) setTime:(SInt64) value {
  resultEvent.hasTime = YES;
  resultEvent.time = value;
  return self;
}
- (EventBuilder*) clearTime {
  resultEvent.hasTime = NO;
  resultEvent.time = 0L;
  return self;
}
- (NSMutableArray *)eventParameters {
  return resultEvent.eventParametersArray;
}
- (EventParameter*)eventParametersAtIndex:(NSUInteger)index {
  return [resultEvent eventParametersAtIndex:index];
}
- (EventBuilder *)addEventParameters:(EventParameter*)value {
  if (resultEvent.eventParametersArray == nil) {
    resultEvent.eventParametersArray = [[NSMutableArray alloc]init];
  }
  [resultEvent.eventParametersArray addObject:value];
  return self;
}
- (EventBuilder *)setEventParametersArray:(NSArray *)array {
  resultEvent.eventParametersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (EventBuilder *)clearEventParameters {
  resultEvent.eventParametersArray = nil;
  return self;
}
@end

@interface EventsData ()
@property SInt32 protocolVersion;
@property (strong) Identifier* identifier;
@property (strong) Device* device;
@property (strong) System* system;
@property (strong) Product* product;
@property (strong) NSMutableArray * eventsArray;
@property SInt64 loginTimestamp;
@end

@implementation EventsData

- (BOOL) hasProtocolVersion {
  return !!hasProtocolVersion_;
}
- (void) setHasProtocolVersion:(BOOL) _value_ {
  hasProtocolVersion_ = !!_value_;
}
@synthesize protocolVersion;
- (BOOL) hasIdentifier {
  return !!hasIdentifier_;
}
- (void) setHasIdentifier:(BOOL) _value_ {
  hasIdentifier_ = !!_value_;
}
@synthesize identifier;
- (BOOL) hasDevice {
  return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) _value_ {
  hasDevice_ = !!_value_;
}
@synthesize device;
- (BOOL) hasSystem {
  return !!hasSystem_;
}
- (void) setHasSystem:(BOOL) _value_ {
  hasSystem_ = !!_value_;
}
@synthesize system;
- (BOOL) hasProduct {
  return !!hasProduct_;
}
- (void) setHasProduct:(BOOL) _value_ {
  hasProduct_ = !!_value_;
}
@synthesize product;
@synthesize eventsArray;
@dynamic events;
- (BOOL) hasLoginTimestamp {
  return !!hasLoginTimestamp_;
}
- (void) setHasLoginTimestamp:(BOOL) _value_ {
  hasLoginTimestamp_ = !!_value_;
}
@synthesize loginTimestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.protocolVersion = 0;
    self.identifier = [Identifier defaultInstance];
    self.device = [Device defaultInstance];
    self.system = [System defaultInstance];
    self.product = [Product defaultInstance];
    self.loginTimestamp = 0L;
  }
  return self;
}
static EventsData* defaultEventsDataInstance = nil;
+ (void) initialize {
  if (self == [EventsData class]) {
    defaultEventsDataInstance = [[EventsData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultEventsDataInstance;
}
- (instancetype) defaultInstance {
  return defaultEventsDataInstance;
}
- (NSArray *)events {
  return eventsArray;
}
- (Event*)eventsAtIndex:(NSUInteger)index {
  return [eventsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasProtocolVersion) {
    return NO;
  }
  if (!self.hasIdentifier) {
    return NO;
  }
  if (!self.hasDevice) {
    return NO;
  }
  if (!self.hasSystem) {
    return NO;
  }
  if (!self.hasProduct) {
    return NO;
  }
  if (!self.identifier.isInitialized) {
    return NO;
  }
  if (!self.device.isInitialized) {
    return NO;
  }
  if (!self.system.isInitialized) {
    return NO;
  }
  if (!self.product.isInitialized) {
    return NO;
  }
  __block BOOL isInitevents = YES;
   [self.events enumerateObjectsUsingBlock:^(Event *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitevents = NO;
      *stop = YES;
    }
  }];
  if (!isInitevents) return isInitevents;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProtocolVersion) {
    [output writeInt32:1 value:self.protocolVersion];
  }
  if (self.hasIdentifier) {
    [output writeMessage:2 value:self.identifier];
  }
  if (self.hasDevice) {
    [output writeMessage:3 value:self.device];
  }
  if (self.hasSystem) {
    [output writeMessage:4 value:self.system];
  }
  if (self.hasProduct) {
    [output writeMessage:5 value:self.product];
  }
  [self.eventsArray enumerateObjectsUsingBlock:^(Event *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  if (self.hasLoginTimestamp) {
    [output writeInt64:7 value:self.loginTimestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProtocolVersion) {
    size_ += computeInt32Size(1, self.protocolVersion);
  }
  if (self.hasIdentifier) {
    size_ += computeMessageSize(2, self.identifier);
  }
  if (self.hasDevice) {
    size_ += computeMessageSize(3, self.device);
  }
  if (self.hasSystem) {
    size_ += computeMessageSize(4, self.system);
  }
  if (self.hasProduct) {
    size_ += computeMessageSize(5, self.product);
  }
  [self.eventsArray enumerateObjectsUsingBlock:^(Event *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  if (self.hasLoginTimestamp) {
    size_ += computeInt64Size(7, self.loginTimestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (EventsData*) parseFromData:(NSData*) data {
  return (EventsData*)[[[EventsData builder] mergeFromData:data] build];
}
+ (EventsData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EventsData*)[[[EventsData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (EventsData*) parseFromInputStream:(NSInputStream*) input {
  return (EventsData*)[[[EventsData builder] mergeFromInputStream:input] build];
}
+ (EventsData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EventsData*)[[[EventsData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EventsData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (EventsData*)[[[EventsData builder] mergeFromCodedInputStream:input] build];
}
+ (EventsData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EventsData*)[[[EventsData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EventsDataBuilder*) builder {
  return [[EventsDataBuilder alloc] init];
}
+ (EventsDataBuilder*) builderWithPrototype:(EventsData*) prototype {
  return [[EventsData builder] mergeFrom:prototype];
}
- (EventsDataBuilder*) builder {
  return [EventsData builder];
}
- (EventsDataBuilder*) toBuilder {
  return [EventsData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProtocolVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolVersion", [NSNumber numberWithInteger:self.protocolVersion]];
  }
  if (self.hasIdentifier) {
    [output appendFormat:@"%@%@ {\n", indent, @"identifier"];
    [self.identifier writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDevice) {
    [output appendFormat:@"%@%@ {\n", indent, @"device"];
    [self.device writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSystem) {
    [output appendFormat:@"%@%@ {\n", indent, @"system"];
    [self.system writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProduct) {
    [output appendFormat:@"%@%@ {\n", indent, @"product"];
    [self.product writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.eventsArray enumerateObjectsUsingBlock:^(Event *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"events"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasLoginTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginTimestamp", [NSNumber numberWithLongLong:self.loginTimestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProtocolVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.protocolVersion] forKey: @"protocolVersion"];
  }
  if (self.hasIdentifier) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.identifier storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"identifier"];
  }
  if (self.hasDevice) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.device storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"device"];
  }
  if (self.hasSystem) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.system storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"system"];
  }
  if (self.hasProduct) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.product storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"product"];
  }
  for (Event* element in self.eventsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"events"];
  }
  if (self.hasLoginTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.loginTimestamp] forKey: @"loginTimestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[EventsData class]]) {
    return NO;
  }
  EventsData *otherMessage = other;
  return
      self.hasProtocolVersion == otherMessage.hasProtocolVersion &&
      (!self.hasProtocolVersion || self.protocolVersion == otherMessage.protocolVersion) &&
      self.hasIdentifier == otherMessage.hasIdentifier &&
      (!self.hasIdentifier || [self.identifier isEqual:otherMessage.identifier]) &&
      self.hasDevice == otherMessage.hasDevice &&
      (!self.hasDevice || [self.device isEqual:otherMessage.device]) &&
      self.hasSystem == otherMessage.hasSystem &&
      (!self.hasSystem || [self.system isEqual:otherMessage.system]) &&
      self.hasProduct == otherMessage.hasProduct &&
      (!self.hasProduct || [self.product isEqual:otherMessage.product]) &&
      [self.eventsArray isEqualToArray:otherMessage.eventsArray] &&
      self.hasLoginTimestamp == otherMessage.hasLoginTimestamp &&
      (!self.hasLoginTimestamp || self.loginTimestamp == otherMessage.loginTimestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProtocolVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protocolVersion] hash];
  }
  if (self.hasIdentifier) {
    hashCode = hashCode * 31 + [self.identifier hash];
  }
  if (self.hasDevice) {
    hashCode = hashCode * 31 + [self.device hash];
  }
  if (self.hasSystem) {
    hashCode = hashCode * 31 + [self.system hash];
  }
  if (self.hasProduct) {
    hashCode = hashCode * 31 + [self.product hash];
  }
  [self.eventsArray enumerateObjectsUsingBlock:^(Event *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasLoginTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.loginTimestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface EventsDataBuilder()
@property (strong) EventsData* resultEventsData;
@end

@implementation EventsDataBuilder
@synthesize resultEventsData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEventsData = [[EventsData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEventsData;
}
- (EventsDataBuilder*) clear {
  self.resultEventsData = [[EventsData alloc] init];
  return self;
}
- (EventsDataBuilder*) clone {
  return [EventsData builderWithPrototype:resultEventsData];
}
- (EventsData*) defaultInstance {
  return [EventsData defaultInstance];
}
- (EventsData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (EventsData*) buildPartial {
  EventsData* returnMe = resultEventsData;
  self.resultEventsData = nil;
  return returnMe;
}
- (EventsDataBuilder*) mergeFrom:(EventsData*) other {
  if (other == [EventsData defaultInstance]) {
    return self;
  }
  if (other.hasProtocolVersion) {
    [self setProtocolVersion:other.protocolVersion];
  }
  if (other.hasIdentifier) {
    [self mergeIdentifier:other.identifier];
  }
  if (other.hasDevice) {
    [self mergeDevice:other.device];
  }
  if (other.hasSystem) {
    [self mergeSystem:other.system];
  }
  if (other.hasProduct) {
    [self mergeProduct:other.product];
  }
  if (other.eventsArray.count > 0) {
    if (resultEventsData.eventsArray == nil) {
      resultEventsData.eventsArray = [[NSMutableArray alloc] initWithArray:other.eventsArray];
    } else {
      [resultEventsData.eventsArray addObjectsFromArray:other.eventsArray];
    }
  }
  if (other.hasLoginTimestamp) {
    [self setLoginTimestamp:other.loginTimestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EventsDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EventsDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setProtocolVersion:[input readInt32]];
        break;
      }
      case 18: {
        IdentifierBuilder* subBuilder = [Identifier builder];
        if (self.hasIdentifier) {
          [subBuilder mergeFrom:self.identifier];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIdentifier:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        DeviceBuilder* subBuilder = [Device builder];
        if (self.hasDevice) {
          [subBuilder mergeFrom:self.device];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDevice:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        SystemBuilder* subBuilder = [System builder];
        if (self.hasSystem) {
          [subBuilder mergeFrom:self.system];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystem:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        ProductBuilder* subBuilder = [Product builder];
        if (self.hasProduct) {
          [subBuilder mergeFrom:self.product];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProduct:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        EventBuilder* subBuilder = [Event builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEvents:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setLoginTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasProtocolVersion {
  return resultEventsData.hasProtocolVersion;
}
- (SInt32) protocolVersion {
  return resultEventsData.protocolVersion;
}
- (EventsDataBuilder*) setProtocolVersion:(SInt32) value {
  resultEventsData.hasProtocolVersion = YES;
  resultEventsData.protocolVersion = value;
  return self;
}
- (EventsDataBuilder*) clearProtocolVersion {
  resultEventsData.hasProtocolVersion = NO;
  resultEventsData.protocolVersion = 0;
  return self;
}
- (BOOL) hasIdentifier {
  return resultEventsData.hasIdentifier;
}
- (Identifier*) identifier {
  return resultEventsData.identifier;
}
- (EventsDataBuilder*) setIdentifier:(Identifier*) value {
  resultEventsData.hasIdentifier = YES;
  resultEventsData.identifier = value;
  return self;
}
- (EventsDataBuilder*) setIdentifierBuilder:(IdentifierBuilder*) builderForValue {
  return [self setIdentifier:[builderForValue build]];
}
- (EventsDataBuilder*) mergeIdentifier:(Identifier*) value {
  if (resultEventsData.hasIdentifier &&
      resultEventsData.identifier != [Identifier defaultInstance]) {
    resultEventsData.identifier =
      [[[Identifier builderWithPrototype:resultEventsData.identifier] mergeFrom:value] buildPartial];
  } else {
    resultEventsData.identifier = value;
  }
  resultEventsData.hasIdentifier = YES;
  return self;
}
- (EventsDataBuilder*) clearIdentifier {
  resultEventsData.hasIdentifier = NO;
  resultEventsData.identifier = [Identifier defaultInstance];
  return self;
}
- (BOOL) hasDevice {
  return resultEventsData.hasDevice;
}
- (Device*) device {
  return resultEventsData.device;
}
- (EventsDataBuilder*) setDevice:(Device*) value {
  resultEventsData.hasDevice = YES;
  resultEventsData.device = value;
  return self;
}
- (EventsDataBuilder*) setDeviceBuilder:(DeviceBuilder*) builderForValue {
  return [self setDevice:[builderForValue build]];
}
- (EventsDataBuilder*) mergeDevice:(Device*) value {
  if (resultEventsData.hasDevice &&
      resultEventsData.device != [Device defaultInstance]) {
    resultEventsData.device =
      [[[Device builderWithPrototype:resultEventsData.device] mergeFrom:value] buildPartial];
  } else {
    resultEventsData.device = value;
  }
  resultEventsData.hasDevice = YES;
  return self;
}
- (EventsDataBuilder*) clearDevice {
  resultEventsData.hasDevice = NO;
  resultEventsData.device = [Device defaultInstance];
  return self;
}
- (BOOL) hasSystem {
  return resultEventsData.hasSystem;
}
- (System*) system {
  return resultEventsData.system;
}
- (EventsDataBuilder*) setSystem:(System*) value {
  resultEventsData.hasSystem = YES;
  resultEventsData.system = value;
  return self;
}
- (EventsDataBuilder*) setSystemBuilder:(SystemBuilder*) builderForValue {
  return [self setSystem:[builderForValue build]];
}
- (EventsDataBuilder*) mergeSystem:(System*) value {
  if (resultEventsData.hasSystem &&
      resultEventsData.system != [System defaultInstance]) {
    resultEventsData.system =
      [[[System builderWithPrototype:resultEventsData.system] mergeFrom:value] buildPartial];
  } else {
    resultEventsData.system = value;
  }
  resultEventsData.hasSystem = YES;
  return self;
}
- (EventsDataBuilder*) clearSystem {
  resultEventsData.hasSystem = NO;
  resultEventsData.system = [System defaultInstance];
  return self;
}
- (BOOL) hasProduct {
  return resultEventsData.hasProduct;
}
- (Product*) product {
  return resultEventsData.product;
}
- (EventsDataBuilder*) setProduct:(Product*) value {
  resultEventsData.hasProduct = YES;
  resultEventsData.product = value;
  return self;
}
- (EventsDataBuilder*) setProductBuilder:(ProductBuilder*) builderForValue {
  return [self setProduct:[builderForValue build]];
}
- (EventsDataBuilder*) mergeProduct:(Product*) value {
  if (resultEventsData.hasProduct &&
      resultEventsData.product != [Product defaultInstance]) {
    resultEventsData.product =
      [[[Product builderWithPrototype:resultEventsData.product] mergeFrom:value] buildPartial];
  } else {
    resultEventsData.product = value;
  }
  resultEventsData.hasProduct = YES;
  return self;
}
- (EventsDataBuilder*) clearProduct {
  resultEventsData.hasProduct = NO;
  resultEventsData.product = [Product defaultInstance];
  return self;
}
- (NSMutableArray *)events {
  return resultEventsData.eventsArray;
}
- (Event*)eventsAtIndex:(NSUInteger)index {
  return [resultEventsData eventsAtIndex:index];
}
- (EventsDataBuilder *)addEvents:(Event*)value {
  if (resultEventsData.eventsArray == nil) {
    resultEventsData.eventsArray = [[NSMutableArray alloc]init];
  }
  [resultEventsData.eventsArray addObject:value];
  return self;
}
- (EventsDataBuilder *)setEventsArray:(NSArray *)array {
  resultEventsData.eventsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (EventsDataBuilder *)clearEvents {
  resultEventsData.eventsArray = nil;
  return self;
}
- (BOOL) hasLoginTimestamp {
  return resultEventsData.hasLoginTimestamp;
}
- (SInt64) loginTimestamp {
  return resultEventsData.loginTimestamp;
}
- (EventsDataBuilder*) setLoginTimestamp:(SInt64) value {
  resultEventsData.hasLoginTimestamp = YES;
  resultEventsData.loginTimestamp = value;
  return self;
}
- (EventsDataBuilder*) clearLoginTimestamp {
  resultEventsData.hasLoginTimestamp = NO;
  resultEventsData.loginTimestamp = 0L;
  return self;
}
@end

@interface AppActiveData ()
@property SInt32 protocolVersion;
@property BOOL isInitiative;
@property (strong) Identifier* identifier;
@property (strong) Device* device;
@property (strong) System* system;
@property (strong) Product* product;
@property SInt64 loginTimestamp;
@end

@implementation AppActiveData

- (BOOL) hasProtocolVersion {
  return !!hasProtocolVersion_;
}
- (void) setHasProtocolVersion:(BOOL) _value_ {
  hasProtocolVersion_ = !!_value_;
}
@synthesize protocolVersion;
- (BOOL) hasIsInitiative {
  return !!hasIsInitiative_;
}
- (void) setHasIsInitiative:(BOOL) _value_ {
  hasIsInitiative_ = !!_value_;
}
- (BOOL) isInitiative {
  return !!isInitiative_;
}
- (void) setIsInitiative:(BOOL) _value_ {
  isInitiative_ = !!_value_;
}
- (BOOL) hasIdentifier {
  return !!hasIdentifier_;
}
- (void) setHasIdentifier:(BOOL) _value_ {
  hasIdentifier_ = !!_value_;
}
@synthesize identifier;
- (BOOL) hasDevice {
  return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) _value_ {
  hasDevice_ = !!_value_;
}
@synthesize device;
- (BOOL) hasSystem {
  return !!hasSystem_;
}
- (void) setHasSystem:(BOOL) _value_ {
  hasSystem_ = !!_value_;
}
@synthesize system;
- (BOOL) hasProduct {
  return !!hasProduct_;
}
- (void) setHasProduct:(BOOL) _value_ {
  hasProduct_ = !!_value_;
}
@synthesize product;
- (BOOL) hasLoginTimestamp {
  return !!hasLoginTimestamp_;
}
- (void) setHasLoginTimestamp:(BOOL) _value_ {
  hasLoginTimestamp_ = !!_value_;
}
@synthesize loginTimestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.protocolVersion = 0;
    self.isInitiative = NO;
    self.identifier = [Identifier defaultInstance];
    self.device = [Device defaultInstance];
    self.system = [System defaultInstance];
    self.product = [Product defaultInstance];
    self.loginTimestamp = 0L;
  }
  return self;
}
static AppActiveData* defaultAppActiveDataInstance = nil;
+ (void) initialize {
  if (self == [AppActiveData class]) {
    defaultAppActiveDataInstance = [[AppActiveData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppActiveDataInstance;
}
- (instancetype) defaultInstance {
  return defaultAppActiveDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasProtocolVersion) {
    return NO;
  }
  if (!self.hasIsInitiative) {
    return NO;
  }
  if (!self.hasIdentifier) {
    return NO;
  }
  if (!self.hasDevice) {
    return NO;
  }
  if (!self.hasSystem) {
    return NO;
  }
  if (!self.hasProduct) {
    return NO;
  }
  if (!self.identifier.isInitialized) {
    return NO;
  }
  if (!self.device.isInitialized) {
    return NO;
  }
  if (!self.system.isInitialized) {
    return NO;
  }
  if (!self.product.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProtocolVersion) {
    [output writeInt32:1 value:self.protocolVersion];
  }
  if (self.hasIsInitiative) {
    [output writeBool:2 value:self.isInitiative];
  }
  if (self.hasIdentifier) {
    [output writeMessage:3 value:self.identifier];
  }
  if (self.hasDevice) {
    [output writeMessage:4 value:self.device];
  }
  if (self.hasSystem) {
    [output writeMessage:5 value:self.system];
  }
  if (self.hasProduct) {
    [output writeMessage:6 value:self.product];
  }
  if (self.hasLoginTimestamp) {
    [output writeInt64:7 value:self.loginTimestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProtocolVersion) {
    size_ += computeInt32Size(1, self.protocolVersion);
  }
  if (self.hasIsInitiative) {
    size_ += computeBoolSize(2, self.isInitiative);
  }
  if (self.hasIdentifier) {
    size_ += computeMessageSize(3, self.identifier);
  }
  if (self.hasDevice) {
    size_ += computeMessageSize(4, self.device);
  }
  if (self.hasSystem) {
    size_ += computeMessageSize(5, self.system);
  }
  if (self.hasProduct) {
    size_ += computeMessageSize(6, self.product);
  }
  if (self.hasLoginTimestamp) {
    size_ += computeInt64Size(7, self.loginTimestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppActiveData*) parseFromData:(NSData*) data {
  return (AppActiveData*)[[[AppActiveData builder] mergeFromData:data] build];
}
+ (AppActiveData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppActiveData*)[[[AppActiveData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppActiveData*) parseFromInputStream:(NSInputStream*) input {
  return (AppActiveData*)[[[AppActiveData builder] mergeFromInputStream:input] build];
}
+ (AppActiveData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppActiveData*)[[[AppActiveData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppActiveData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppActiveData*)[[[AppActiveData builder] mergeFromCodedInputStream:input] build];
}
+ (AppActiveData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppActiveData*)[[[AppActiveData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppActiveDataBuilder*) builder {
  return [[AppActiveDataBuilder alloc] init];
}
+ (AppActiveDataBuilder*) builderWithPrototype:(AppActiveData*) prototype {
  return [[AppActiveData builder] mergeFrom:prototype];
}
- (AppActiveDataBuilder*) builder {
  return [AppActiveData builder];
}
- (AppActiveDataBuilder*) toBuilder {
  return [AppActiveData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProtocolVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolVersion", [NSNumber numberWithInteger:self.protocolVersion]];
  }
  if (self.hasIsInitiative) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isInitiative", [NSNumber numberWithBool:self.isInitiative]];
  }
  if (self.hasIdentifier) {
    [output appendFormat:@"%@%@ {\n", indent, @"identifier"];
    [self.identifier writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDevice) {
    [output appendFormat:@"%@%@ {\n", indent, @"device"];
    [self.device writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSystem) {
    [output appendFormat:@"%@%@ {\n", indent, @"system"];
    [self.system writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProduct) {
    [output appendFormat:@"%@%@ {\n", indent, @"product"];
    [self.product writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLoginTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginTimestamp", [NSNumber numberWithLongLong:self.loginTimestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProtocolVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.protocolVersion] forKey: @"protocolVersion"];
  }
  if (self.hasIsInitiative) {
    [dictionary setObject: [NSNumber numberWithBool:self.isInitiative] forKey: @"isInitiative"];
  }
  if (self.hasIdentifier) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.identifier storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"identifier"];
  }
  if (self.hasDevice) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.device storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"device"];
  }
  if (self.hasSystem) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.system storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"system"];
  }
  if (self.hasProduct) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.product storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"product"];
  }
  if (self.hasLoginTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.loginTimestamp] forKey: @"loginTimestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppActiveData class]]) {
    return NO;
  }
  AppActiveData *otherMessage = other;
  return
      self.hasProtocolVersion == otherMessage.hasProtocolVersion &&
      (!self.hasProtocolVersion || self.protocolVersion == otherMessage.protocolVersion) &&
      self.hasIsInitiative == otherMessage.hasIsInitiative &&
      (!self.hasIsInitiative || self.isInitiative == otherMessage.isInitiative) &&
      self.hasIdentifier == otherMessage.hasIdentifier &&
      (!self.hasIdentifier || [self.identifier isEqual:otherMessage.identifier]) &&
      self.hasDevice == otherMessage.hasDevice &&
      (!self.hasDevice || [self.device isEqual:otherMessage.device]) &&
      self.hasSystem == otherMessage.hasSystem &&
      (!self.hasSystem || [self.system isEqual:otherMessage.system]) &&
      self.hasProduct == otherMessage.hasProduct &&
      (!self.hasProduct || [self.product isEqual:otherMessage.product]) &&
      self.hasLoginTimestamp == otherMessage.hasLoginTimestamp &&
      (!self.hasLoginTimestamp || self.loginTimestamp == otherMessage.loginTimestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProtocolVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protocolVersion] hash];
  }
  if (self.hasIsInitiative) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isInitiative] hash];
  }
  if (self.hasIdentifier) {
    hashCode = hashCode * 31 + [self.identifier hash];
  }
  if (self.hasDevice) {
    hashCode = hashCode * 31 + [self.device hash];
  }
  if (self.hasSystem) {
    hashCode = hashCode * 31 + [self.system hash];
  }
  if (self.hasProduct) {
    hashCode = hashCode * 31 + [self.product hash];
  }
  if (self.hasLoginTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.loginTimestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppActiveDataBuilder()
@property (strong) AppActiveData* resultAppActiveData;
@end

@implementation AppActiveDataBuilder
@synthesize resultAppActiveData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppActiveData = [[AppActiveData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppActiveData;
}
- (AppActiveDataBuilder*) clear {
  self.resultAppActiveData = [[AppActiveData alloc] init];
  return self;
}
- (AppActiveDataBuilder*) clone {
  return [AppActiveData builderWithPrototype:resultAppActiveData];
}
- (AppActiveData*) defaultInstance {
  return [AppActiveData defaultInstance];
}
- (AppActiveData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppActiveData*) buildPartial {
  AppActiveData* returnMe = resultAppActiveData;
  self.resultAppActiveData = nil;
  return returnMe;
}
- (AppActiveDataBuilder*) mergeFrom:(AppActiveData*) other {
  if (other == [AppActiveData defaultInstance]) {
    return self;
  }
  if (other.hasProtocolVersion) {
    [self setProtocolVersion:other.protocolVersion];
  }
  if (other.hasIsInitiative) {
    [self setIsInitiative:other.isInitiative];
  }
  if (other.hasIdentifier) {
    [self mergeIdentifier:other.identifier];
  }
  if (other.hasDevice) {
    [self mergeDevice:other.device];
  }
  if (other.hasSystem) {
    [self mergeSystem:other.system];
  }
  if (other.hasProduct) {
    [self mergeProduct:other.product];
  }
  if (other.hasLoginTimestamp) {
    [self setLoginTimestamp:other.loginTimestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppActiveDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppActiveDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setProtocolVersion:[input readInt32]];
        break;
      }
      case 16: {
        [self setIsInitiative:[input readBool]];
        break;
      }
      case 26: {
        IdentifierBuilder* subBuilder = [Identifier builder];
        if (self.hasIdentifier) {
          [subBuilder mergeFrom:self.identifier];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIdentifier:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        DeviceBuilder* subBuilder = [Device builder];
        if (self.hasDevice) {
          [subBuilder mergeFrom:self.device];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDevice:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        SystemBuilder* subBuilder = [System builder];
        if (self.hasSystem) {
          [subBuilder mergeFrom:self.system];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystem:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        ProductBuilder* subBuilder = [Product builder];
        if (self.hasProduct) {
          [subBuilder mergeFrom:self.product];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProduct:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setLoginTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasProtocolVersion {
  return resultAppActiveData.hasProtocolVersion;
}
- (SInt32) protocolVersion {
  return resultAppActiveData.protocolVersion;
}
- (AppActiveDataBuilder*) setProtocolVersion:(SInt32) value {
  resultAppActiveData.hasProtocolVersion = YES;
  resultAppActiveData.protocolVersion = value;
  return self;
}
- (AppActiveDataBuilder*) clearProtocolVersion {
  resultAppActiveData.hasProtocolVersion = NO;
  resultAppActiveData.protocolVersion = 0;
  return self;
}
- (BOOL) hasIsInitiative {
  return resultAppActiveData.hasIsInitiative;
}
- (BOOL) isInitiative {
  return resultAppActiveData.isInitiative;
}
- (AppActiveDataBuilder*) setIsInitiative:(BOOL) value {
  resultAppActiveData.hasIsInitiative = YES;
  resultAppActiveData.isInitiative = value;
  return self;
}
- (AppActiveDataBuilder*) clearIsInitiative {
  resultAppActiveData.hasIsInitiative = NO;
  resultAppActiveData.isInitiative = NO;
  return self;
}
- (BOOL) hasIdentifier {
  return resultAppActiveData.hasIdentifier;
}
- (Identifier*) identifier {
  return resultAppActiveData.identifier;
}
- (AppActiveDataBuilder*) setIdentifier:(Identifier*) value {
  resultAppActiveData.hasIdentifier = YES;
  resultAppActiveData.identifier = value;
  return self;
}
- (AppActiveDataBuilder*) setIdentifierBuilder:(IdentifierBuilder*) builderForValue {
  return [self setIdentifier:[builderForValue build]];
}
- (AppActiveDataBuilder*) mergeIdentifier:(Identifier*) value {
  if (resultAppActiveData.hasIdentifier &&
      resultAppActiveData.identifier != [Identifier defaultInstance]) {
    resultAppActiveData.identifier =
      [[[Identifier builderWithPrototype:resultAppActiveData.identifier] mergeFrom:value] buildPartial];
  } else {
    resultAppActiveData.identifier = value;
  }
  resultAppActiveData.hasIdentifier = YES;
  return self;
}
- (AppActiveDataBuilder*) clearIdentifier {
  resultAppActiveData.hasIdentifier = NO;
  resultAppActiveData.identifier = [Identifier defaultInstance];
  return self;
}
- (BOOL) hasDevice {
  return resultAppActiveData.hasDevice;
}
- (Device*) device {
  return resultAppActiveData.device;
}
- (AppActiveDataBuilder*) setDevice:(Device*) value {
  resultAppActiveData.hasDevice = YES;
  resultAppActiveData.device = value;
  return self;
}
- (AppActiveDataBuilder*) setDeviceBuilder:(DeviceBuilder*) builderForValue {
  return [self setDevice:[builderForValue build]];
}
- (AppActiveDataBuilder*) mergeDevice:(Device*) value {
  if (resultAppActiveData.hasDevice &&
      resultAppActiveData.device != [Device defaultInstance]) {
    resultAppActiveData.device =
      [[[Device builderWithPrototype:resultAppActiveData.device] mergeFrom:value] buildPartial];
  } else {
    resultAppActiveData.device = value;
  }
  resultAppActiveData.hasDevice = YES;
  return self;
}
- (AppActiveDataBuilder*) clearDevice {
  resultAppActiveData.hasDevice = NO;
  resultAppActiveData.device = [Device defaultInstance];
  return self;
}
- (BOOL) hasSystem {
  return resultAppActiveData.hasSystem;
}
- (System*) system {
  return resultAppActiveData.system;
}
- (AppActiveDataBuilder*) setSystem:(System*) value {
  resultAppActiveData.hasSystem = YES;
  resultAppActiveData.system = value;
  return self;
}
- (AppActiveDataBuilder*) setSystemBuilder:(SystemBuilder*) builderForValue {
  return [self setSystem:[builderForValue build]];
}
- (AppActiveDataBuilder*) mergeSystem:(System*) value {
  if (resultAppActiveData.hasSystem &&
      resultAppActiveData.system != [System defaultInstance]) {
    resultAppActiveData.system =
      [[[System builderWithPrototype:resultAppActiveData.system] mergeFrom:value] buildPartial];
  } else {
    resultAppActiveData.system = value;
  }
  resultAppActiveData.hasSystem = YES;
  return self;
}
- (AppActiveDataBuilder*) clearSystem {
  resultAppActiveData.hasSystem = NO;
  resultAppActiveData.system = [System defaultInstance];
  return self;
}
- (BOOL) hasProduct {
  return resultAppActiveData.hasProduct;
}
- (Product*) product {
  return resultAppActiveData.product;
}
- (AppActiveDataBuilder*) setProduct:(Product*) value {
  resultAppActiveData.hasProduct = YES;
  resultAppActiveData.product = value;
  return self;
}
- (AppActiveDataBuilder*) setProductBuilder:(ProductBuilder*) builderForValue {
  return [self setProduct:[builderForValue build]];
}
- (AppActiveDataBuilder*) mergeProduct:(Product*) value {
  if (resultAppActiveData.hasProduct &&
      resultAppActiveData.product != [Product defaultInstance]) {
    resultAppActiveData.product =
      [[[Product builderWithPrototype:resultAppActiveData.product] mergeFrom:value] buildPartial];
  } else {
    resultAppActiveData.product = value;
  }
  resultAppActiveData.hasProduct = YES;
  return self;
}
- (AppActiveDataBuilder*) clearProduct {
  resultAppActiveData.hasProduct = NO;
  resultAppActiveData.product = [Product defaultInstance];
  return self;
}
- (BOOL) hasLoginTimestamp {
  return resultAppActiveData.hasLoginTimestamp;
}
- (SInt64) loginTimestamp {
  return resultAppActiveData.loginTimestamp;
}
- (AppActiveDataBuilder*) setLoginTimestamp:(SInt64) value {
  resultAppActiveData.hasLoginTimestamp = YES;
  resultAppActiveData.loginTimestamp = value;
  return self;
}
- (AppActiveDataBuilder*) clearLoginTimestamp {
  resultAppActiveData.hasLoginTimestamp = NO;
  resultAppActiveData.loginTimestamp = 0L;
  return self;
}
@end

@interface RoomEventParameter ()
@property (strong) NSString* key;
@property (strong) NSString* value;
@end

@implementation RoomEventParameter

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = @"";
  }
  return self;
}
static RoomEventParameter* defaultRoomEventParameterInstance = nil;
+ (void) initialize {
  if (self == [RoomEventParameter class]) {
    defaultRoomEventParameterInstance = [[RoomEventParameter alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomEventParameterInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomEventParameterInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomEventParameter*) parseFromData:(NSData*) data {
  return (RoomEventParameter*)[[[RoomEventParameter builder] mergeFromData:data] build];
}
+ (RoomEventParameter*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomEventParameter*)[[[RoomEventParameter builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomEventParameter*) parseFromInputStream:(NSInputStream*) input {
  return (RoomEventParameter*)[[[RoomEventParameter builder] mergeFromInputStream:input] build];
}
+ (RoomEventParameter*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomEventParameter*)[[[RoomEventParameter builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomEventParameter*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomEventParameter*)[[[RoomEventParameter builder] mergeFromCodedInputStream:input] build];
}
+ (RoomEventParameter*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomEventParameter*)[[[RoomEventParameter builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomEventParameterBuilder*) builder {
  return [[RoomEventParameterBuilder alloc] init];
}
+ (RoomEventParameterBuilder*) builderWithPrototype:(RoomEventParameter*) prototype {
  return [[RoomEventParameter builder] mergeFrom:prototype];
}
- (RoomEventParameterBuilder*) builder {
  return [RoomEventParameter builder];
}
- (RoomEventParameterBuilder*) toBuilder {
  return [RoomEventParameter builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomEventParameter class]]) {
    return NO;
  }
  RoomEventParameter *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomEventParameterBuilder()
@property (strong) RoomEventParameter* resultRoomEventParameter;
@end

@implementation RoomEventParameterBuilder
@synthesize resultRoomEventParameter;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomEventParameter = [[RoomEventParameter alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomEventParameter;
}
- (RoomEventParameterBuilder*) clear {
  self.resultRoomEventParameter = [[RoomEventParameter alloc] init];
  return self;
}
- (RoomEventParameterBuilder*) clone {
  return [RoomEventParameter builderWithPrototype:resultRoomEventParameter];
}
- (RoomEventParameter*) defaultInstance {
  return [RoomEventParameter defaultInstance];
}
- (RoomEventParameter*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomEventParameter*) buildPartial {
  RoomEventParameter* returnMe = resultRoomEventParameter;
  self.resultRoomEventParameter = nil;
  return returnMe;
}
- (RoomEventParameterBuilder*) mergeFrom:(RoomEventParameter*) other {
  if (other == [RoomEventParameter defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomEventParameterBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomEventParameterBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultRoomEventParameter.hasKey;
}
- (NSString*) key {
  return resultRoomEventParameter.key;
}
- (RoomEventParameterBuilder*) setKey:(NSString*) value {
  resultRoomEventParameter.hasKey = YES;
  resultRoomEventParameter.key = value;
  return self;
}
- (RoomEventParameterBuilder*) clearKey {
  resultRoomEventParameter.hasKey = NO;
  resultRoomEventParameter.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultRoomEventParameter.hasValue;
}
- (NSString*) value {
  return resultRoomEventParameter.value;
}
- (RoomEventParameterBuilder*) setValue:(NSString*) value {
  resultRoomEventParameter.hasValue = YES;
  resultRoomEventParameter.value = value;
  return self;
}
- (RoomEventParameterBuilder*) clearValue {
  resultRoomEventParameter.hasValue = NO;
  resultRoomEventParameter.value = @"";
  return self;
}
@end

@interface RoomEvent ()
@property SInt32 moudleId;
@property SInt32 positionId;
@property SInt32 roomId;
@property SInt32 broadcastId;
@property SInt64 time;
@property (strong) NSString* id;
@property (strong) NSMutableArray * roomeventParametersArray;
@end

@implementation RoomEvent

- (BOOL) hasMoudleId {
  return !!hasMoudleId_;
}
- (void) setHasMoudleId:(BOOL) _value_ {
  hasMoudleId_ = !!_value_;
}
@synthesize moudleId;
- (BOOL) hasPositionId {
  return !!hasPositionId_;
}
- (void) setHasPositionId:(BOOL) _value_ {
  hasPositionId_ = !!_value_;
}
@synthesize positionId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasBroadcastId {
  return !!hasBroadcastId_;
}
- (void) setHasBroadcastId:(BOOL) _value_ {
  hasBroadcastId_ = !!_value_;
}
@synthesize broadcastId;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
@synthesize roomeventParametersArray;
@dynamic roomeventParameters;
- (instancetype) init {
  if ((self = [super init])) {
    self.moudleId = 0;
    self.positionId = 0;
    self.roomId = 0;
    self.broadcastId = 0;
    self.time = 0L;
    self.id = @"";
  }
  return self;
}
static RoomEvent* defaultRoomEventInstance = nil;
+ (void) initialize {
  if (self == [RoomEvent class]) {
    defaultRoomEventInstance = [[RoomEvent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomEventInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomEventInstance;
}
- (NSArray *)roomeventParameters {
  return roomeventParametersArray;
}
- (RoomEventParameter*)roomeventParametersAtIndex:(NSUInteger)index {
  return [roomeventParametersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasMoudleId) {
    return NO;
  }
  if (!self.hasPositionId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasBroadcastId) {
    return NO;
  }
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMoudleId) {
    [output writeInt32:1 value:self.moudleId];
  }
  if (self.hasPositionId) {
    [output writeInt32:2 value:self.positionId];
  }
  if (self.hasRoomId) {
    [output writeInt32:3 value:self.roomId];
  }
  if (self.hasBroadcastId) {
    [output writeInt32:4 value:self.broadcastId];
  }
  if (self.hasTime) {
    [output writeInt64:5 value:self.time];
  }
  if (self.hasId) {
    [output writeString:6 value:self.id];
  }
  [self.roomeventParametersArray enumerateObjectsUsingBlock:^(RoomEventParameter *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMoudleId) {
    size_ += computeInt32Size(1, self.moudleId);
  }
  if (self.hasPositionId) {
    size_ += computeInt32Size(2, self.positionId);
  }
  if (self.hasRoomId) {
    size_ += computeInt32Size(3, self.roomId);
  }
  if (self.hasBroadcastId) {
    size_ += computeInt32Size(4, self.broadcastId);
  }
  if (self.hasTime) {
    size_ += computeInt64Size(5, self.time);
  }
  if (self.hasId) {
    size_ += computeStringSize(6, self.id);
  }
  [self.roomeventParametersArray enumerateObjectsUsingBlock:^(RoomEventParameter *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomEvent*) parseFromData:(NSData*) data {
  return (RoomEvent*)[[[RoomEvent builder] mergeFromData:data] build];
}
+ (RoomEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomEvent*)[[[RoomEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomEvent*) parseFromInputStream:(NSInputStream*) input {
  return (RoomEvent*)[[[RoomEvent builder] mergeFromInputStream:input] build];
}
+ (RoomEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomEvent*)[[[RoomEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomEvent*)[[[RoomEvent builder] mergeFromCodedInputStream:input] build];
}
+ (RoomEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomEvent*)[[[RoomEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomEventBuilder*) builder {
  return [[RoomEventBuilder alloc] init];
}
+ (RoomEventBuilder*) builderWithPrototype:(RoomEvent*) prototype {
  return [[RoomEvent builder] mergeFrom:prototype];
}
- (RoomEventBuilder*) builder {
  return [RoomEvent builder];
}
- (RoomEventBuilder*) toBuilder {
  return [RoomEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMoudleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"moudleId", [NSNumber numberWithInteger:self.moudleId]];
  }
  if (self.hasPositionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"positionId", [NSNumber numberWithInteger:self.positionId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasBroadcastId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"broadcastId", [NSNumber numberWithInteger:self.broadcastId]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithLongLong:self.time]];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  [self.roomeventParametersArray enumerateObjectsUsingBlock:^(RoomEventParameter *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomeventParameters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMoudleId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.moudleId] forKey: @"moudleId"];
  }
  if (self.hasPositionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.positionId] forKey: @"positionId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasBroadcastId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.broadcastId] forKey: @"broadcastId"];
  }
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.time] forKey: @"time"];
  }
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  for (RoomEventParameter* element in self.roomeventParametersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"roomeventParameters"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomEvent class]]) {
    return NO;
  }
  RoomEvent *otherMessage = other;
  return
      self.hasMoudleId == otherMessage.hasMoudleId &&
      (!self.hasMoudleId || self.moudleId == otherMessage.moudleId) &&
      self.hasPositionId == otherMessage.hasPositionId &&
      (!self.hasPositionId || self.positionId == otherMessage.positionId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasBroadcastId == otherMessage.hasBroadcastId &&
      (!self.hasBroadcastId || self.broadcastId == otherMessage.broadcastId) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      [self.roomeventParametersArray isEqualToArray:otherMessage.roomeventParametersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMoudleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.moudleId] hash];
  }
  if (self.hasPositionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.positionId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasBroadcastId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.broadcastId] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.time] hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  [self.roomeventParametersArray enumerateObjectsUsingBlock:^(RoomEventParameter *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomEventBuilder()
@property (strong) RoomEvent* resultRoomEvent;
@end

@implementation RoomEventBuilder
@synthesize resultRoomEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomEvent = [[RoomEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomEvent;
}
- (RoomEventBuilder*) clear {
  self.resultRoomEvent = [[RoomEvent alloc] init];
  return self;
}
- (RoomEventBuilder*) clone {
  return [RoomEvent builderWithPrototype:resultRoomEvent];
}
- (RoomEvent*) defaultInstance {
  return [RoomEvent defaultInstance];
}
- (RoomEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomEvent*) buildPartial {
  RoomEvent* returnMe = resultRoomEvent;
  self.resultRoomEvent = nil;
  return returnMe;
}
- (RoomEventBuilder*) mergeFrom:(RoomEvent*) other {
  if (other == [RoomEvent defaultInstance]) {
    return self;
  }
  if (other.hasMoudleId) {
    [self setMoudleId:other.moudleId];
  }
  if (other.hasPositionId) {
    [self setPositionId:other.positionId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasBroadcastId) {
    [self setBroadcastId:other.broadcastId];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.roomeventParametersArray.count > 0) {
    if (resultRoomEvent.roomeventParametersArray == nil) {
      resultRoomEvent.roomeventParametersArray = [[NSMutableArray alloc] initWithArray:other.roomeventParametersArray];
    } else {
      [resultRoomEvent.roomeventParametersArray addObjectsFromArray:other.roomeventParametersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMoudleId:[input readInt32]];
        break;
      }
      case 16: {
        [self setPositionId:[input readInt32]];
        break;
      }
      case 24: {
        [self setRoomId:[input readInt32]];
        break;
      }
      case 32: {
        [self setBroadcastId:[input readInt32]];
        break;
      }
      case 40: {
        [self setTime:[input readInt64]];
        break;
      }
      case 50: {
        [self setId:[input readString]];
        break;
      }
      case 58: {
        RoomEventParameterBuilder* subBuilder = [RoomEventParameter builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRoomeventParameters:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMoudleId {
  return resultRoomEvent.hasMoudleId;
}
- (SInt32) moudleId {
  return resultRoomEvent.moudleId;
}
- (RoomEventBuilder*) setMoudleId:(SInt32) value {
  resultRoomEvent.hasMoudleId = YES;
  resultRoomEvent.moudleId = value;
  return self;
}
- (RoomEventBuilder*) clearMoudleId {
  resultRoomEvent.hasMoudleId = NO;
  resultRoomEvent.moudleId = 0;
  return self;
}
- (BOOL) hasPositionId {
  return resultRoomEvent.hasPositionId;
}
- (SInt32) positionId {
  return resultRoomEvent.positionId;
}
- (RoomEventBuilder*) setPositionId:(SInt32) value {
  resultRoomEvent.hasPositionId = YES;
  resultRoomEvent.positionId = value;
  return self;
}
- (RoomEventBuilder*) clearPositionId {
  resultRoomEvent.hasPositionId = NO;
  resultRoomEvent.positionId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultRoomEvent.hasRoomId;
}
- (SInt32) roomId {
  return resultRoomEvent.roomId;
}
- (RoomEventBuilder*) setRoomId:(SInt32) value {
  resultRoomEvent.hasRoomId = YES;
  resultRoomEvent.roomId = value;
  return self;
}
- (RoomEventBuilder*) clearRoomId {
  resultRoomEvent.hasRoomId = NO;
  resultRoomEvent.roomId = 0;
  return self;
}
- (BOOL) hasBroadcastId {
  return resultRoomEvent.hasBroadcastId;
}
- (SInt32) broadcastId {
  return resultRoomEvent.broadcastId;
}
- (RoomEventBuilder*) setBroadcastId:(SInt32) value {
  resultRoomEvent.hasBroadcastId = YES;
  resultRoomEvent.broadcastId = value;
  return self;
}
- (RoomEventBuilder*) clearBroadcastId {
  resultRoomEvent.hasBroadcastId = NO;
  resultRoomEvent.broadcastId = 0;
  return self;
}
- (BOOL) hasTime {
  return resultRoomEvent.hasTime;
}
- (SInt64) time {
  return resultRoomEvent.time;
}
- (RoomEventBuilder*) setTime:(SInt64) value {
  resultRoomEvent.hasTime = YES;
  resultRoomEvent.time = value;
  return self;
}
- (RoomEventBuilder*) clearTime {
  resultRoomEvent.hasTime = NO;
  resultRoomEvent.time = 0L;
  return self;
}
- (BOOL) hasId {
  return resultRoomEvent.hasId;
}
- (NSString*) id {
  return resultRoomEvent.id;
}
- (RoomEventBuilder*) setId:(NSString*) value {
  resultRoomEvent.hasId = YES;
  resultRoomEvent.id = value;
  return self;
}
- (RoomEventBuilder*) clearId {
  resultRoomEvent.hasId = NO;
  resultRoomEvent.id = @"";
  return self;
}
- (NSMutableArray *)roomeventParameters {
  return resultRoomEvent.roomeventParametersArray;
}
- (RoomEventParameter*)roomeventParametersAtIndex:(NSUInteger)index {
  return [resultRoomEvent roomeventParametersAtIndex:index];
}
- (RoomEventBuilder *)addRoomeventParameters:(RoomEventParameter*)value {
  if (resultRoomEvent.roomeventParametersArray == nil) {
    resultRoomEvent.roomeventParametersArray = [[NSMutableArray alloc]init];
  }
  [resultRoomEvent.roomeventParametersArray addObject:value];
  return self;
}
- (RoomEventBuilder *)setRoomeventParametersArray:(NSArray *)array {
  resultRoomEvent.roomeventParametersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (RoomEventBuilder *)clearRoomeventParameters {
  resultRoomEvent.roomeventParametersArray = nil;
  return self;
}
@end

@interface UserActionData ()
@property SInt32 protocolVersion;
@property (strong) Identifier* identifier;
@property (strong) Device* device;
@property (strong) System* system;
@property (strong) Product* product;
@property SInt64 roomSessionId;
@property (strong) NSMutableArray * roomeventsArray;
@property SInt64 loginTimestamp;
@end

@implementation UserActionData

- (BOOL) hasProtocolVersion {
  return !!hasProtocolVersion_;
}
- (void) setHasProtocolVersion:(BOOL) _value_ {
  hasProtocolVersion_ = !!_value_;
}
@synthesize protocolVersion;
- (BOOL) hasIdentifier {
  return !!hasIdentifier_;
}
- (void) setHasIdentifier:(BOOL) _value_ {
  hasIdentifier_ = !!_value_;
}
@synthesize identifier;
- (BOOL) hasDevice {
  return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) _value_ {
  hasDevice_ = !!_value_;
}
@synthesize device;
- (BOOL) hasSystem {
  return !!hasSystem_;
}
- (void) setHasSystem:(BOOL) _value_ {
  hasSystem_ = !!_value_;
}
@synthesize system;
- (BOOL) hasProduct {
  return !!hasProduct_;
}
- (void) setHasProduct:(BOOL) _value_ {
  hasProduct_ = !!_value_;
}
@synthesize product;
- (BOOL) hasRoomSessionId {
  return !!hasRoomSessionId_;
}
- (void) setHasRoomSessionId:(BOOL) _value_ {
  hasRoomSessionId_ = !!_value_;
}
@synthesize roomSessionId;
@synthesize roomeventsArray;
@dynamic roomevents;
- (BOOL) hasLoginTimestamp {
  return !!hasLoginTimestamp_;
}
- (void) setHasLoginTimestamp:(BOOL) _value_ {
  hasLoginTimestamp_ = !!_value_;
}
@synthesize loginTimestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.protocolVersion = 0;
    self.identifier = [Identifier defaultInstance];
    self.device = [Device defaultInstance];
    self.system = [System defaultInstance];
    self.product = [Product defaultInstance];
    self.roomSessionId = 0L;
    self.loginTimestamp = 0L;
  }
  return self;
}
static UserActionData* defaultUserActionDataInstance = nil;
+ (void) initialize {
  if (self == [UserActionData class]) {
    defaultUserActionDataInstance = [[UserActionData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserActionDataInstance;
}
- (instancetype) defaultInstance {
  return defaultUserActionDataInstance;
}
- (NSArray *)roomevents {
  return roomeventsArray;
}
- (RoomEvent*)roomeventsAtIndex:(NSUInteger)index {
  return [roomeventsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasProtocolVersion) {
    return NO;
  }
  if (!self.hasIdentifier) {
    return NO;
  }
  if (!self.hasDevice) {
    return NO;
  }
  if (!self.hasSystem) {
    return NO;
  }
  if (!self.hasProduct) {
    return NO;
  }
  if (!self.hasRoomSessionId) {
    return NO;
  }
  if (!self.identifier.isInitialized) {
    return NO;
  }
  if (!self.device.isInitialized) {
    return NO;
  }
  if (!self.system.isInitialized) {
    return NO;
  }
  if (!self.product.isInitialized) {
    return NO;
  }
  __block BOOL isInitroomevents = YES;
   [self.roomevents enumerateObjectsUsingBlock:^(RoomEvent *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitroomevents = NO;
      *stop = YES;
    }
  }];
  if (!isInitroomevents) return isInitroomevents;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProtocolVersion) {
    [output writeInt32:1 value:self.protocolVersion];
  }
  if (self.hasIdentifier) {
    [output writeMessage:2 value:self.identifier];
  }
  if (self.hasDevice) {
    [output writeMessage:3 value:self.device];
  }
  if (self.hasSystem) {
    [output writeMessage:4 value:self.system];
  }
  if (self.hasProduct) {
    [output writeMessage:5 value:self.product];
  }
  if (self.hasRoomSessionId) {
    [output writeInt64:6 value:self.roomSessionId];
  }
  [self.roomeventsArray enumerateObjectsUsingBlock:^(RoomEvent *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  if (self.hasLoginTimestamp) {
    [output writeInt64:8 value:self.loginTimestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProtocolVersion) {
    size_ += computeInt32Size(1, self.protocolVersion);
  }
  if (self.hasIdentifier) {
    size_ += computeMessageSize(2, self.identifier);
  }
  if (self.hasDevice) {
    size_ += computeMessageSize(3, self.device);
  }
  if (self.hasSystem) {
    size_ += computeMessageSize(4, self.system);
  }
  if (self.hasProduct) {
    size_ += computeMessageSize(5, self.product);
  }
  if (self.hasRoomSessionId) {
    size_ += computeInt64Size(6, self.roomSessionId);
  }
  [self.roomeventsArray enumerateObjectsUsingBlock:^(RoomEvent *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  if (self.hasLoginTimestamp) {
    size_ += computeInt64Size(8, self.loginTimestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserActionData*) parseFromData:(NSData*) data {
  return (UserActionData*)[[[UserActionData builder] mergeFromData:data] build];
}
+ (UserActionData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserActionData*)[[[UserActionData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserActionData*) parseFromInputStream:(NSInputStream*) input {
  return (UserActionData*)[[[UserActionData builder] mergeFromInputStream:input] build];
}
+ (UserActionData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserActionData*)[[[UserActionData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserActionData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserActionData*)[[[UserActionData builder] mergeFromCodedInputStream:input] build];
}
+ (UserActionData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserActionData*)[[[UserActionData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserActionDataBuilder*) builder {
  return [[UserActionDataBuilder alloc] init];
}
+ (UserActionDataBuilder*) builderWithPrototype:(UserActionData*) prototype {
  return [[UserActionData builder] mergeFrom:prototype];
}
- (UserActionDataBuilder*) builder {
  return [UserActionData builder];
}
- (UserActionDataBuilder*) toBuilder {
  return [UserActionData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProtocolVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolVersion", [NSNumber numberWithInteger:self.protocolVersion]];
  }
  if (self.hasIdentifier) {
    [output appendFormat:@"%@%@ {\n", indent, @"identifier"];
    [self.identifier writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDevice) {
    [output appendFormat:@"%@%@ {\n", indent, @"device"];
    [self.device writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSystem) {
    [output appendFormat:@"%@%@ {\n", indent, @"system"];
    [self.system writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProduct) {
    [output appendFormat:@"%@%@ {\n", indent, @"product"];
    [self.product writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRoomSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomSessionId", [NSNumber numberWithLongLong:self.roomSessionId]];
  }
  [self.roomeventsArray enumerateObjectsUsingBlock:^(RoomEvent *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomevents"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasLoginTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginTimestamp", [NSNumber numberWithLongLong:self.loginTimestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProtocolVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.protocolVersion] forKey: @"protocolVersion"];
  }
  if (self.hasIdentifier) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.identifier storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"identifier"];
  }
  if (self.hasDevice) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.device storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"device"];
  }
  if (self.hasSystem) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.system storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"system"];
  }
  if (self.hasProduct) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.product storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"product"];
  }
  if (self.hasRoomSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.roomSessionId] forKey: @"roomSessionId"];
  }
  for (RoomEvent* element in self.roomeventsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"roomevents"];
  }
  if (self.hasLoginTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.loginTimestamp] forKey: @"loginTimestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserActionData class]]) {
    return NO;
  }
  UserActionData *otherMessage = other;
  return
      self.hasProtocolVersion == otherMessage.hasProtocolVersion &&
      (!self.hasProtocolVersion || self.protocolVersion == otherMessage.protocolVersion) &&
      self.hasIdentifier == otherMessage.hasIdentifier &&
      (!self.hasIdentifier || [self.identifier isEqual:otherMessage.identifier]) &&
      self.hasDevice == otherMessage.hasDevice &&
      (!self.hasDevice || [self.device isEqual:otherMessage.device]) &&
      self.hasSystem == otherMessage.hasSystem &&
      (!self.hasSystem || [self.system isEqual:otherMessage.system]) &&
      self.hasProduct == otherMessage.hasProduct &&
      (!self.hasProduct || [self.product isEqual:otherMessage.product]) &&
      self.hasRoomSessionId == otherMessage.hasRoomSessionId &&
      (!self.hasRoomSessionId || self.roomSessionId == otherMessage.roomSessionId) &&
      [self.roomeventsArray isEqualToArray:otherMessage.roomeventsArray] &&
      self.hasLoginTimestamp == otherMessage.hasLoginTimestamp &&
      (!self.hasLoginTimestamp || self.loginTimestamp == otherMessage.loginTimestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProtocolVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protocolVersion] hash];
  }
  if (self.hasIdentifier) {
    hashCode = hashCode * 31 + [self.identifier hash];
  }
  if (self.hasDevice) {
    hashCode = hashCode * 31 + [self.device hash];
  }
  if (self.hasSystem) {
    hashCode = hashCode * 31 + [self.system hash];
  }
  if (self.hasProduct) {
    hashCode = hashCode * 31 + [self.product hash];
  }
  if (self.hasRoomSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.roomSessionId] hash];
  }
  [self.roomeventsArray enumerateObjectsUsingBlock:^(RoomEvent *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasLoginTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.loginTimestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserActionDataBuilder()
@property (strong) UserActionData* resultUserActionData;
@end

@implementation UserActionDataBuilder
@synthesize resultUserActionData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserActionData = [[UserActionData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserActionData;
}
- (UserActionDataBuilder*) clear {
  self.resultUserActionData = [[UserActionData alloc] init];
  return self;
}
- (UserActionDataBuilder*) clone {
  return [UserActionData builderWithPrototype:resultUserActionData];
}
- (UserActionData*) defaultInstance {
  return [UserActionData defaultInstance];
}
- (UserActionData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserActionData*) buildPartial {
  UserActionData* returnMe = resultUserActionData;
  self.resultUserActionData = nil;
  return returnMe;
}
- (UserActionDataBuilder*) mergeFrom:(UserActionData*) other {
  if (other == [UserActionData defaultInstance]) {
    return self;
  }
  if (other.hasProtocolVersion) {
    [self setProtocolVersion:other.protocolVersion];
  }
  if (other.hasIdentifier) {
    [self mergeIdentifier:other.identifier];
  }
  if (other.hasDevice) {
    [self mergeDevice:other.device];
  }
  if (other.hasSystem) {
    [self mergeSystem:other.system];
  }
  if (other.hasProduct) {
    [self mergeProduct:other.product];
  }
  if (other.hasRoomSessionId) {
    [self setRoomSessionId:other.roomSessionId];
  }
  if (other.roomeventsArray.count > 0) {
    if (resultUserActionData.roomeventsArray == nil) {
      resultUserActionData.roomeventsArray = [[NSMutableArray alloc] initWithArray:other.roomeventsArray];
    } else {
      [resultUserActionData.roomeventsArray addObjectsFromArray:other.roomeventsArray];
    }
  }
  if (other.hasLoginTimestamp) {
    [self setLoginTimestamp:other.loginTimestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserActionDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserActionDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setProtocolVersion:[input readInt32]];
        break;
      }
      case 18: {
        IdentifierBuilder* subBuilder = [Identifier builder];
        if (self.hasIdentifier) {
          [subBuilder mergeFrom:self.identifier];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIdentifier:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        DeviceBuilder* subBuilder = [Device builder];
        if (self.hasDevice) {
          [subBuilder mergeFrom:self.device];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDevice:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        SystemBuilder* subBuilder = [System builder];
        if (self.hasSystem) {
          [subBuilder mergeFrom:self.system];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystem:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        ProductBuilder* subBuilder = [Product builder];
        if (self.hasProduct) {
          [subBuilder mergeFrom:self.product];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProduct:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setRoomSessionId:[input readInt64]];
        break;
      }
      case 58: {
        RoomEventBuilder* subBuilder = [RoomEvent builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRoomevents:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self setLoginTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasProtocolVersion {
  return resultUserActionData.hasProtocolVersion;
}
- (SInt32) protocolVersion {
  return resultUserActionData.protocolVersion;
}
- (UserActionDataBuilder*) setProtocolVersion:(SInt32) value {
  resultUserActionData.hasProtocolVersion = YES;
  resultUserActionData.protocolVersion = value;
  return self;
}
- (UserActionDataBuilder*) clearProtocolVersion {
  resultUserActionData.hasProtocolVersion = NO;
  resultUserActionData.protocolVersion = 0;
  return self;
}
- (BOOL) hasIdentifier {
  return resultUserActionData.hasIdentifier;
}
- (Identifier*) identifier {
  return resultUserActionData.identifier;
}
- (UserActionDataBuilder*) setIdentifier:(Identifier*) value {
  resultUserActionData.hasIdentifier = YES;
  resultUserActionData.identifier = value;
  return self;
}
- (UserActionDataBuilder*) setIdentifierBuilder:(IdentifierBuilder*) builderForValue {
  return [self setIdentifier:[builderForValue build]];
}
- (UserActionDataBuilder*) mergeIdentifier:(Identifier*) value {
  if (resultUserActionData.hasIdentifier &&
      resultUserActionData.identifier != [Identifier defaultInstance]) {
    resultUserActionData.identifier =
      [[[Identifier builderWithPrototype:resultUserActionData.identifier] mergeFrom:value] buildPartial];
  } else {
    resultUserActionData.identifier = value;
  }
  resultUserActionData.hasIdentifier = YES;
  return self;
}
- (UserActionDataBuilder*) clearIdentifier {
  resultUserActionData.hasIdentifier = NO;
  resultUserActionData.identifier = [Identifier defaultInstance];
  return self;
}
- (BOOL) hasDevice {
  return resultUserActionData.hasDevice;
}
- (Device*) device {
  return resultUserActionData.device;
}
- (UserActionDataBuilder*) setDevice:(Device*) value {
  resultUserActionData.hasDevice = YES;
  resultUserActionData.device = value;
  return self;
}
- (UserActionDataBuilder*) setDeviceBuilder:(DeviceBuilder*) builderForValue {
  return [self setDevice:[builderForValue build]];
}
- (UserActionDataBuilder*) mergeDevice:(Device*) value {
  if (resultUserActionData.hasDevice &&
      resultUserActionData.device != [Device defaultInstance]) {
    resultUserActionData.device =
      [[[Device builderWithPrototype:resultUserActionData.device] mergeFrom:value] buildPartial];
  } else {
    resultUserActionData.device = value;
  }
  resultUserActionData.hasDevice = YES;
  return self;
}
- (UserActionDataBuilder*) clearDevice {
  resultUserActionData.hasDevice = NO;
  resultUserActionData.device = [Device defaultInstance];
  return self;
}
- (BOOL) hasSystem {
  return resultUserActionData.hasSystem;
}
- (System*) system {
  return resultUserActionData.system;
}
- (UserActionDataBuilder*) setSystem:(System*) value {
  resultUserActionData.hasSystem = YES;
  resultUserActionData.system = value;
  return self;
}
- (UserActionDataBuilder*) setSystemBuilder:(SystemBuilder*) builderForValue {
  return [self setSystem:[builderForValue build]];
}
- (UserActionDataBuilder*) mergeSystem:(System*) value {
  if (resultUserActionData.hasSystem &&
      resultUserActionData.system != [System defaultInstance]) {
    resultUserActionData.system =
      [[[System builderWithPrototype:resultUserActionData.system] mergeFrom:value] buildPartial];
  } else {
    resultUserActionData.system = value;
  }
  resultUserActionData.hasSystem = YES;
  return self;
}
- (UserActionDataBuilder*) clearSystem {
  resultUserActionData.hasSystem = NO;
  resultUserActionData.system = [System defaultInstance];
  return self;
}
- (BOOL) hasProduct {
  return resultUserActionData.hasProduct;
}
- (Product*) product {
  return resultUserActionData.product;
}
- (UserActionDataBuilder*) setProduct:(Product*) value {
  resultUserActionData.hasProduct = YES;
  resultUserActionData.product = value;
  return self;
}
- (UserActionDataBuilder*) setProductBuilder:(ProductBuilder*) builderForValue {
  return [self setProduct:[builderForValue build]];
}
- (UserActionDataBuilder*) mergeProduct:(Product*) value {
  if (resultUserActionData.hasProduct &&
      resultUserActionData.product != [Product defaultInstance]) {
    resultUserActionData.product =
      [[[Product builderWithPrototype:resultUserActionData.product] mergeFrom:value] buildPartial];
  } else {
    resultUserActionData.product = value;
  }
  resultUserActionData.hasProduct = YES;
  return self;
}
- (UserActionDataBuilder*) clearProduct {
  resultUserActionData.hasProduct = NO;
  resultUserActionData.product = [Product defaultInstance];
  return self;
}
- (BOOL) hasRoomSessionId {
  return resultUserActionData.hasRoomSessionId;
}
- (SInt64) roomSessionId {
  return resultUserActionData.roomSessionId;
}
- (UserActionDataBuilder*) setRoomSessionId:(SInt64) value {
  resultUserActionData.hasRoomSessionId = YES;
  resultUserActionData.roomSessionId = value;
  return self;
}
- (UserActionDataBuilder*) clearRoomSessionId {
  resultUserActionData.hasRoomSessionId = NO;
  resultUserActionData.roomSessionId = 0L;
  return self;
}
- (NSMutableArray *)roomevents {
  return resultUserActionData.roomeventsArray;
}
- (RoomEvent*)roomeventsAtIndex:(NSUInteger)index {
  return [resultUserActionData roomeventsAtIndex:index];
}
- (UserActionDataBuilder *)addRoomevents:(RoomEvent*)value {
  if (resultUserActionData.roomeventsArray == nil) {
    resultUserActionData.roomeventsArray = [[NSMutableArray alloc]init];
  }
  [resultUserActionData.roomeventsArray addObject:value];
  return self;
}
- (UserActionDataBuilder *)setRoomeventsArray:(NSArray *)array {
  resultUserActionData.roomeventsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UserActionDataBuilder *)clearRoomevents {
  resultUserActionData.roomeventsArray = nil;
  return self;
}
- (BOOL) hasLoginTimestamp {
  return resultUserActionData.hasLoginTimestamp;
}
- (SInt64) loginTimestamp {
  return resultUserActionData.loginTimestamp;
}
- (UserActionDataBuilder*) setLoginTimestamp:(SInt64) value {
  resultUserActionData.hasLoginTimestamp = YES;
  resultUserActionData.loginTimestamp = value;
  return self;
}
- (UserActionDataBuilder*) clearLoginTimestamp {
  resultUserActionData.hasLoginTimestamp = NO;
  resultUserActionData.loginTimestamp = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
